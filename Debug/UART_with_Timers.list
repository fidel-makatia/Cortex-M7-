
UART_with_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b70  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da4  08005da4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dac  08005dac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  20000070  08005e24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08005e24  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014348  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026d6  00000000  00000000  000343e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011c8  00000000  00000000  00036ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c0  00000000  00000000  00037c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027c07  00000000  00000000  00038d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eae4  00000000  00000000  0006094f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fb712  00000000  00000000  0006f433  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016ab45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ef8  00000000  00000000  0016abc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005d28 	.word	0x08005d28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005d28 	.word	0x08005d28

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b598      	push	{r3, r4, r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fd27 	bl	8001006 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f83a 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f9b4 	bl	8000928 <MX_GPIO_Init>
  MX_ETH_Init();
 80005c0:	f000 f8c6 	bl	8000750 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005c4:	f000 f952 	bl	800086c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c8:	f000 f980 	bl	80008cc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80005cc:	f000 f900 	bl	80007d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //say something
  buf_len=sprintf(msg,"Timer test\n");
 80005d0:	4a10      	ldr	r2, [pc, #64]	; (8000614 <main+0x64>)
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <main+0x68>)
 80005d4:	4614      	mov	r4, r2
 80005d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80005d8:	6020      	str	r0, [r4, #0]
 80005da:	6061      	str	r1, [r4, #4]
 80005dc:	60a2      	str	r2, [r4, #8]
 80005de:	220b      	movs	r2, #11
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <main+0x6c>)
 80005e2:	601a      	str	r2, [r3, #0]
 HAL_UART_Transmit(&huart3, (uint8_t*)msg, buf_len, 100);
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <main+0x6c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	2364      	movs	r3, #100	; 0x64
 80005ec:	4909      	ldr	r1, [pc, #36]	; (8000614 <main+0x64>)
 80005ee:	480c      	ldr	r0, [pc, #48]	; (8000620 <main+0x70>)
 80005f0:	f003 fc60 	bl	8003eb4 <HAL_UART_Transmit>

 //start timer
 HAL_TIM_Base_Start_IT(&htim2);
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <main+0x74>)
 80005f6:	f002 ffaf 	bl	8003558 <HAL_TIM_Base_Start_IT>
tim_val= __HAL_TIM_GET_COUNTER(&htim2);
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <main+0x74>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000600:	b29a      	uxth	r2, r3
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <main+0x78>)
 8000604:	801a      	strh	r2, [r3, #0]

		}*/


	  //while(reception_complete !=1)
	  HAL_UART_Receive_IT(&huart3, &rcd_data, 1);
 8000606:	2201      	movs	r2, #1
 8000608:	4908      	ldr	r1, [pc, #32]	; (800062c <main+0x7c>)
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <main+0x70>)
 800060c:	f003 fce5 	bl	8003fda <HAL_UART_Receive_IT>
 8000610:	e7f9      	b.n	8000606 <main+0x56>
 8000612:	bf00      	nop
 8000614:	20000560 	.word	0x20000560
 8000618:	08005d40 	.word	0x08005d40
 800061c:	20000594 	.word	0x20000594
 8000620:	200000a0 	.word	0x200000a0
 8000624:	20000598 	.word	0x20000598
 8000628:	20000592 	.word	0x20000592
 800062c:	20000124 	.word	0x20000124

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0b4      	sub	sp, #208	; 0xd0
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f004 ff64 	bl	800550c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2284      	movs	r2, #132	; 0x84
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f004 ff55 	bl	800550c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000662:	f001 fe85 	bl	8002370 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	4b37      	ldr	r3, [pc, #220]	; (8000744 <SystemClock_Config+0x114>)
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	4a36      	ldr	r2, [pc, #216]	; (8000744 <SystemClock_Config+0x114>)
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000670:	6413      	str	r3, [r2, #64]	; 0x40
 8000672:	4b34      	ldr	r3, [pc, #208]	; (8000744 <SystemClock_Config+0x114>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800067e:	4b32      	ldr	r3, [pc, #200]	; (8000748 <SystemClock_Config+0x118>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000686:	4a30      	ldr	r2, [pc, #192]	; (8000748 <SystemClock_Config+0x118>)
 8000688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <SystemClock_Config+0x118>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069a:	2301      	movs	r3, #1
 800069c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b6:	2304      	movs	r3, #4
 80006b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006bc:	2348      	movs	r3, #72	; 0x48
 80006be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006c8:	2303      	movs	r3, #3
 80006ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fe5c 	bl	8002390 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006de:	f000 fa39 	bl	8000b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000702:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000706:	2102      	movs	r1, #2
 8000708:	4618      	mov	r0, r3
 800070a:	f002 f8e5 	bl	80028d8 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000714:	f000 fa1e 	bl	8000b54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <SystemClock_Config+0x11c>)
 800071a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800071c:	2300      	movs	r3, #0
 800071e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000720:	2300      	movs	r3, #0
 8000722:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	4618      	mov	r0, r3
 800072c:	f002 facc 	bl	8002cc8 <HAL_RCCEx_PeriphCLKConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000736:	f000 fa0d 	bl	8000b54 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	37d0      	adds	r7, #208	; 0xd0
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000
 800074c:	00200100 	.word	0x00200100

08000750 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_ETH_Init+0x78>)
 8000756:	4a1d      	ldr	r2, [pc, #116]	; (80007cc <MX_ETH_Init+0x7c>)
 8000758:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_ETH_Init+0x78>)
 800075c:	2201      	movs	r2, #1
 800075e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_ETH_Init+0x78>)
 8000762:	2200      	movs	r2, #0
 8000764:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_ETH_Init+0x78>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_ETH_Init+0x78>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	3301      	adds	r3, #1
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_ETH_Init+0x78>)
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	3302      	adds	r3, #2
 800077e:	22e1      	movs	r2, #225	; 0xe1
 8000780:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_ETH_Init+0x78>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	3303      	adds	r3, #3
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_ETH_Init+0x78>)
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	3304      	adds	r3, #4
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_ETH_Init+0x78>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	3305      	adds	r3, #5
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_ETH_Init+0x78>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_ETH_Init+0x78>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_ETH_Init+0x78>)
 80007ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007b2:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_ETH_Init+0x78>)
 80007b6:	f000 fe49 	bl	800144c <HAL_ETH_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80007c0:	f000 f9c8 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200005e4 	.word	0x200005e4
 80007cc:	40028000 	.word	0x40028000

080007d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_TIM2_Init+0x98>)
 80007f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_TIM2_Init+0x98>)
 80007f8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80007fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_TIM2_Init+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_TIM2_Init+0x98>)
 8000806:	f242 720f 	movw	r2, #9999	; 0x270f
 800080a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_TIM2_Init+0x98>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_TIM2_Init+0x98>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000818:	4813      	ldr	r0, [pc, #76]	; (8000868 <MX_TIM2_Init+0x98>)
 800081a:	f002 fe45 	bl	80034a8 <HAL_TIM_Base_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000824:	f000 f996 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	4619      	mov	r1, r3
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <MX_TIM2_Init+0x98>)
 8000836:	f003 f827 	bl	8003888 <HAL_TIM_ConfigClockSource>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000840:	f000 f988 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_TIM2_Init+0x98>)
 8000852:	f003 fa35 	bl	8003cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800085c:	f000 f97a 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000598 	.word	0x20000598

0800086c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000872:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <MX_USART3_UART_Init+0x5c>)
 8000874:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 80008b0:	f003 fab2 	bl	8003e18 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008ba:	f000 f94b 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000a0 	.word	0x200000a0
 80008c8:	40004800 	.word	0x40004800

080008cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008da:	2206      	movs	r2, #6
 80008dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000904:	2201      	movs	r2, #1
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000910:	f001 fbe5 	bl	80020de <HAL_PCD_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800091a:	f000 f91b 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000128 	.word	0x20000128

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4b46      	ldr	r3, [pc, #280]	; (8000a58 <MX_GPIO_Init+0x130>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a45      	ldr	r2, [pc, #276]	; (8000a58 <MX_GPIO_Init+0x130>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b43      	ldr	r3, [pc, #268]	; (8000a58 <MX_GPIO_Init+0x130>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	61bb      	str	r3, [r7, #24]
 8000954:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000956:	4b40      	ldr	r3, [pc, #256]	; (8000a58 <MX_GPIO_Init+0x130>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a3f      	ldr	r2, [pc, #252]	; (8000a58 <MX_GPIO_Init+0x130>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b3d      	ldr	r3, [pc, #244]	; (8000a58 <MX_GPIO_Init+0x130>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b3a      	ldr	r3, [pc, #232]	; (8000a58 <MX_GPIO_Init+0x130>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a39      	ldr	r2, [pc, #228]	; (8000a58 <MX_GPIO_Init+0x130>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b37      	ldr	r3, [pc, #220]	; (8000a58 <MX_GPIO_Init+0x130>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <MX_GPIO_Init+0x130>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a33      	ldr	r2, [pc, #204]	; (8000a58 <MX_GPIO_Init+0x130>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <MX_GPIO_Init+0x130>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099e:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <MX_GPIO_Init+0x130>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a2d      	ldr	r2, [pc, #180]	; (8000a58 <MX_GPIO_Init+0x130>)
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <MX_GPIO_Init+0x130>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0308 	and.w	r3, r3, #8
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b6:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <MX_GPIO_Init+0x130>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <MX_GPIO_Init+0x130>)
 80009bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <MX_GPIO_Init+0x130>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009d4:	4821      	ldr	r0, [pc, #132]	; (8000a5c <MX_GPIO_Init+0x134>)
 80009d6:	f001 fb4f 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2140      	movs	r1, #64	; 0x40
 80009de:	4820      	ldr	r0, [pc, #128]	; (8000a60 <MX_GPIO_Init+0x138>)
 80009e0:	f001 fb4a 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_GPIO_Init+0x13c>)
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	481b      	ldr	r0, [pc, #108]	; (8000a68 <MX_GPIO_Init+0x140>)
 80009fa:	f001 f993 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009fe:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4811      	ldr	r0, [pc, #68]	; (8000a5c <MX_GPIO_Init+0x134>)
 8000a18:	f001 f984 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a1c:	2340      	movs	r3, #64	; 0x40
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	480b      	ldr	r0, [pc, #44]	; (8000a60 <MX_GPIO_Init+0x138>)
 8000a34:	f001 f976 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_GPIO_Init+0x138>)
 8000a4c:	f001 f96a 	bl	8001d24 <HAL_GPIO_Init>

}
 8000a50:	bf00      	nop
 8000a52:	3730      	adds	r7, #48	; 0x30
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	40021800 	.word	0x40021800
 8000a64:	10110000 	.word	0x10110000
 8000a68:	40020800 	.word	0x40020800

08000a6c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	if(htim==&htim2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d11d      	bne.n	8000ab8 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{

		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a7c:	2180      	movs	r1, #128	; 0x80
 8000a7e:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000a80:	f001 fb13 	bl	80020aa <HAL_GPIO_TogglePin>
		//Get time elapsed
		tim_val = __HAL_TIM_GET_COUNTER(&htim2) - tim_val;
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000a96:	801a      	strh	r2, [r3, #0]

		//print value out
		buf_len = sprintf(msg, "%u  us\r\n", tim_val);
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	490b      	ldr	r1, [pc, #44]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000aa0:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000aa2:	f004 fd3b 	bl	800551c <siprintf>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000aaa:	601a      	str	r2, [r3, #0]
		//HAL_UART_Transmit(&huart3, (uint8_t*) msg, buf_len, 100);
		 // HAL_UART_Transmit(&huart3, data_buffer, count, 100);

		tim_val = __HAL_TIM_GET_COUNTER(&htim2);
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ab6:	801a      	strh	r2, [r3, #0]


	}
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000598 	.word	0x20000598
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	20000592 	.word	0x20000592
 8000acc:	08005d4c 	.word	0x08005d4c
 8000ad0:	20000560 	.word	0x20000560
 8000ad4:	20000594 	.word	0x20000594

08000ad8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
     if(rcd_data=='\r')
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_UART_RxCpltCallback+0x68>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b0d      	cmp	r3, #13
 8000ae6:	d11e      	bne.n	8000b26 <HAL_UART_RxCpltCallback+0x4e>
     {
    	 reception_complete=1;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_UART_RxCpltCallback+0x6c>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
    	 //data_buffer[count++]='r';
    	 HAL_UART_Transmit(&huart3, data_buffer, count, 100);
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_UART_RxCpltCallback+0x70>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	2364      	movs	r3, #100	; 0x64
 8000af6:	4915      	ldr	r1, [pc, #84]	; (8000b4c <HAL_UART_RxCpltCallback+0x74>)
 8000af8:	4815      	ldr	r0, [pc, #84]	; (8000b50 <HAL_UART_RxCpltCallback+0x78>)
 8000afa:	f003 f9db 	bl	8003eb4 <HAL_UART_Transmit>
    	 for(int i=0;i<count;i++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	e007      	b.n	8000b14 <HAL_UART_RxCpltCallback+0x3c>
    		 data_buffer[i]=0;
 8000b04:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <HAL_UART_RxCpltCallback+0x74>)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4413      	add	r3, r2
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
    	 for(int i=0;i<count;i++)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	3301      	adds	r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_UART_RxCpltCallback+0x70>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d3f2      	bcc.n	8000b04 <HAL_UART_RxCpltCallback+0x2c>
    	 count=0;
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_UART_RxCpltCallback+0x70>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
     else
     { data_buffer[count++]=rcd_data;

     }

}
 8000b24:	e008      	b.n	8000b38 <HAL_UART_RxCpltCallback+0x60>
     { data_buffer[count++]=rcd_data;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_UART_RxCpltCallback+0x70>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	4906      	ldr	r1, [pc, #24]	; (8000b48 <HAL_UART_RxCpltCallback+0x70>)
 8000b2e:	600a      	str	r2, [r1, #0]
 8000b30:	4a03      	ldr	r2, [pc, #12]	; (8000b40 <HAL_UART_RxCpltCallback+0x68>)
 8000b32:	7811      	ldrb	r1, [r2, #0]
 8000b34:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <HAL_UART_RxCpltCallback+0x74>)
 8000b36:	54d1      	strb	r1, [r2, r3]
}
 8000b38:	bf00      	nop
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000124 	.word	0x20000124
 8000b44:	20000090 	.word	0x20000090
 8000b48:	2000008c 	.word	0x2000008c
 8000b4c:	2000062c 	.word	0x2000062c
 8000b50:	200000a0 	.word	0x200000a0

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08e      	sub	sp, #56	; 0x38
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a4e      	ldr	r2, [pc, #312]	; (8000d04 <HAL_ETH_MspInit+0x158>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	f040 8096 	bne.w	8000cfc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bd0:	4b4d      	ldr	r3, [pc, #308]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	4a4c      	ldr	r2, [pc, #304]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000bd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bda:	6313      	str	r3, [r2, #48]	; 0x30
 8000bdc:	4b4a      	ldr	r3, [pc, #296]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000be4:	623b      	str	r3, [r7, #32]
 8000be6:	6a3b      	ldr	r3, [r7, #32]
 8000be8:	4b47      	ldr	r3, [pc, #284]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	4a46      	ldr	r2, [pc, #280]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000bee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf4:	4b44      	ldr	r3, [pc, #272]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bfc:	61fb      	str	r3, [r7, #28]
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	4b41      	ldr	r3, [pc, #260]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	4a40      	ldr	r2, [pc, #256]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000c06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0c:	4b3e      	ldr	r3, [pc, #248]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c14:	61bb      	str	r3, [r7, #24]
 8000c16:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c18:	4b3b      	ldr	r3, [pc, #236]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	4a3a      	ldr	r2, [pc, #232]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	6313      	str	r3, [r2, #48]	; 0x30
 8000c24:	4b38      	ldr	r3, [pc, #224]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	4a34      	ldr	r2, [pc, #208]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3c:	4b32      	ldr	r3, [pc, #200]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	4b2f      	ldr	r3, [pc, #188]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	4a2e      	ldr	r2, [pc, #184]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	6313      	str	r3, [r2, #48]	; 0x30
 8000c54:	4b2c      	ldr	r3, [pc, #176]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c60:	4b29      	ldr	r3, [pc, #164]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a28      	ldr	r2, [pc, #160]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6c:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <HAL_ETH_MspInit+0x15c>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c78:	2332      	movs	r3, #50	; 0x32
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c88:	230b      	movs	r3, #11
 8000c8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	481e      	ldr	r0, [pc, #120]	; (8000d0c <HAL_ETH_MspInit+0x160>)
 8000c94:	f001 f846 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c98:	2386      	movs	r3, #134	; 0x86
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca8:	230b      	movs	r3, #11
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4817      	ldr	r0, [pc, #92]	; (8000d10 <HAL_ETH_MspInit+0x164>)
 8000cb4:	f001 f836 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cca:	230b      	movs	r3, #11
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480f      	ldr	r0, [pc, #60]	; (8000d14 <HAL_ETH_MspInit+0x168>)
 8000cd6:	f001 f825 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cda:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cec:	230b      	movs	r3, #11
 8000cee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4808      	ldr	r0, [pc, #32]	; (8000d18 <HAL_ETH_MspInit+0x16c>)
 8000cf8:	f001 f814 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3738      	adds	r7, #56	; 0x38
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40028000 	.word	0x40028000
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020800 	.word	0x40020800
 8000d10:	40020000 	.word	0x40020000
 8000d14:	40020400 	.word	0x40020400
 8000d18:	40021800 	.word	0x40021800

08000d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d2c:	d113      	bne.n	8000d56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_TIM_Base_MspInit+0x44>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <HAL_TIM_Base_MspInit+0x44>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_TIM_Base_MspInit+0x44>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	201c      	movs	r0, #28
 8000d4c:	f000 fab5 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d50:	201c      	movs	r0, #28
 8000d52:	f000 face 	bl	80012f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <HAL_UART_MspInit+0x8c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d130      	bne.n	8000de8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a1a      	ldr	r2, [pc, #104]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000da4:	f043 0308 	orr.w	r3, r3, #8
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000db6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4809      	ldr	r0, [pc, #36]	; (8000df8 <HAL_UART_MspInit+0x94>)
 8000dd4:	f000 ffa6 	bl	8001d24 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2027      	movs	r0, #39	; 0x27
 8000dde:	f000 fa6c 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000de2:	2027      	movs	r0, #39	; 0x27
 8000de4:	f000 fa85 	bl	80012f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40004800 	.word	0x40004800
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020c00 	.word	0x40020c00

08000dfc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e1c:	d141      	bne.n	8000ea2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <HAL_PCD_MspInit+0xb0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a22      	ldr	r2, [pc, #136]	; (8000eac <HAL_PCD_MspInit+0xb0>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <HAL_PCD_MspInit+0xb0>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e36:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e48:	230a      	movs	r3, #10
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4817      	ldr	r0, [pc, #92]	; (8000eb0 <HAL_PCD_MspInit+0xb4>)
 8000e54:	f000 ff66 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4810      	ldr	r0, [pc, #64]	; (8000eb0 <HAL_PCD_MspInit+0xb4>)
 8000e6e:	f000 ff59 	bl	8001d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_PCD_MspInit+0xb0>)
 8000e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e76:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <HAL_PCD_MspInit+0xb0>)
 8000e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e7c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_PCD_MspInit+0xb0>)
 8000e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_PCD_MspInit+0xb0>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_PCD_MspInit+0xb0>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b05      	ldr	r3, [pc, #20]	; (8000eac <HAL_PCD_MspInit+0xb0>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	; 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler+0x4>

08000ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f08:	f000 f8ba 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <TIM2_IRQHandler+0x10>)
 8000f16:	f002 fb97 	bl	8003648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000598 	.word	0x20000598

08000f24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <USART3_IRQHandler+0x10>)
 8000f2a:	f003 f893 	bl	8004054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200000a0 	.word	0x200000a0

08000f38 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <_sbrk+0x50>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x16>
		heap_end = &end;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <_sbrk+0x50>)
 8000f4a:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <_sbrk+0x54>)
 8000f4c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <_sbrk+0x50>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <_sbrk+0x50>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	466a      	mov	r2, sp
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d907      	bls.n	8000f72 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f62:	f004 faa9 	bl	80054b8 <__errno>
 8000f66:	4602      	mov	r2, r0
 8000f68:	230c      	movs	r3, #12
 8000f6a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	e006      	b.n	8000f80 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <_sbrk+0x50>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a03      	ldr	r2, [pc, #12]	; (8000f88 <_sbrk+0x50>)
 8000f7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000094 	.word	0x20000094
 8000f8c:	20000698 	.word	0x20000698

08000f90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fba:	490e      	ldr	r1, [pc, #56]	; (8000ff4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd0:	4c0b      	ldr	r4, [pc, #44]	; (8001000 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fde:	f7ff ffd7 	bl	8000f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f004 fa6f 	bl	80054c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fae3 	bl	80005b0 <main>
  bx  lr    
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ff8:	08005db4 	.word	0x08005db4
  ldr r2, =_sbss
 8000ffc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001000:	20000698 	.word	0x20000698

08001004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC_IRQHandler>

08001006 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100a:	2003      	movs	r0, #3
 800100c:	f000 f94a 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001010:	2000      	movs	r0, #0
 8001012:	f000 f805 	bl	8001020 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001016:	f7ff fda5 	bl	8000b64 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x54>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x58>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f965 	bl	800130e <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e00e      	b.n	800106c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d80a      	bhi.n	800106a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f000 f92d 	bl	80012ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <HAL_InitTick+0x5c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000000 	.word	0x20000000
 8001078:	20000008 	.word	0x20000008
 800107c:	20000004 	.word	0x20000004

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000690 	.word	0x20000690

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000690 	.word	0x20000690

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff ffee 	bl	80010a8 <HAL_GetTick>
 80010cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d8:	d005      	beq.n	80010e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_Delay+0x40>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e6:	bf00      	nop
 80010e8:	f7ff ffde 	bl	80010a8 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8f7      	bhi.n	80010e8 <HAL_Delay+0x28>
  {
  }
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000008 	.word	0x20000008

08001104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <__NVIC_SetPriorityGrouping+0x40>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	4313      	orrs	r3, r2
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <__NVIC_SetPriorityGrouping+0x40>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00
 8001148:	05fa0000 	.word	0x05fa0000

0800114c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	2b00      	cmp	r3, #0
 8001178:	db0b      	blt.n	8001192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	f003 021f 	and.w	r2, r3, #31
 8001180:	4907      	ldr	r1, [pc, #28]	; (80011a0 <__NVIC_EnableIRQ+0x38>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	2001      	movs	r0, #1
 800118a:	fa00 f202 	lsl.w	r2, r0, r2
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000e100 	.word	0xe000e100

080011a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	db0a      	blt.n	80011ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	490c      	ldr	r1, [pc, #48]	; (80011f0 <__NVIC_SetPriority+0x4c>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011cc:	e00a      	b.n	80011e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4908      	ldr	r1, [pc, #32]	; (80011f4 <__NVIC_SetPriority+0x50>)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	3b04      	subs	r3, #4
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	440b      	add	r3, r1
 80011e2:	761a      	strb	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f1c3 0307 	rsb	r3, r3, #7
 8001212:	2b04      	cmp	r3, #4
 8001214:	bf28      	it	cs
 8001216:	2304      	movcs	r3, #4
 8001218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3304      	adds	r3, #4
 800121e:	2b06      	cmp	r3, #6
 8001220:	d902      	bls.n	8001228 <NVIC_EncodePriority+0x30>
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3b03      	subs	r3, #3
 8001226:	e000      	b.n	800122a <NVIC_EncodePriority+0x32>
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	f04f 32ff 	mov.w	r2, #4294967295
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	43d9      	mvns	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	4313      	orrs	r3, r2
         );
}
 8001252:	4618      	mov	r0, r3
 8001254:	3724      	adds	r7, #36	; 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001270:	d301      	bcc.n	8001276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001272:	2301      	movs	r3, #1
 8001274:	e00f      	b.n	8001296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <SysTick_Config+0x40>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127e:	210f      	movs	r1, #15
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f7ff ff8e 	bl	80011a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <SysTick_Config+0x40>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <SysTick_Config+0x40>)
 8001290:	2207      	movs	r2, #7
 8001292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff29 	bl	8001104 <__NVIC_SetPriorityGrouping>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012cc:	f7ff ff3e 	bl	800114c <__NVIC_GetPriorityGrouping>
 80012d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f7ff ff8e 	bl	80011f8 <NVIC_EncodePriority>
 80012dc:	4602      	mov	r2, r0
 80012de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff5d 	bl	80011a4 <__NVIC_SetPriority>
}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff31 	bl	8001168 <__NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffa2 	bl	8001260 <SysTick_Config>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff feb8 	bl	80010a8 <HAL_GetTick>
 8001338:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d008      	beq.n	8001358 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e052      	b.n	80013fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0216 	bic.w	r2, r2, #22
 8001366:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001376:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	2b00      	cmp	r3, #0
 800137e:	d103      	bne.n	8001388 <HAL_DMA_Abort+0x62>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0208 	bic.w	r2, r2, #8
 8001396:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0201 	bic.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a8:	e013      	b.n	80013d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013aa:	f7ff fe7d 	bl	80010a8 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b05      	cmp	r3, #5
 80013b6:	d90c      	bls.n	80013d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2220      	movs	r2, #32
 80013bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2203      	movs	r2, #3
 80013ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e015      	b.n	80013fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e4      	bne.n	80013aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e4:	223f      	movs	r2, #63	; 0x3f
 80013e6:	409a      	lsls	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d004      	beq.n	8001424 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e00c      	b.n	800143e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2205      	movs	r2, #5
 8001428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0201 	bic.w	r2, r2, #1
 800143a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800145c:	4ba9      	ldr	r3, [pc, #676]	; (8001704 <HAL_ETH_Init+0x2b8>)
 800145e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e183      	b.n	800177a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fb90 	bl	8000bac <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148c:	4b9e      	ldr	r3, [pc, #632]	; (8001708 <HAL_ETH_Init+0x2bc>)
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	4a9d      	ldr	r2, [pc, #628]	; (8001708 <HAL_ETH_Init+0x2bc>)
 8001492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001496:	6453      	str	r3, [r2, #68]	; 0x44
 8001498:	4b9b      	ldr	r3, [pc, #620]	; (8001708 <HAL_ETH_Init+0x2bc>)
 800149a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014a4:	4b99      	ldr	r3, [pc, #612]	; (800170c <HAL_ETH_Init+0x2c0>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4a98      	ldr	r2, [pc, #608]	; (800170c <HAL_ETH_Init+0x2c0>)
 80014aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014ae:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014b0:	4b96      	ldr	r3, [pc, #600]	; (800170c <HAL_ETH_Init+0x2c0>)
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4994      	ldr	r1, [pc, #592]	; (800170c <HAL_ETH_Init+0x2c0>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0201 	orr.w	r2, r2, #1
 80014d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80014d6:	f7ff fde7 	bl	80010a8 <HAL_GetTick>
 80014da:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014dc:	e011      	b.n	8001502 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80014de:	f7ff fde3 	bl	80010a8 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014ec:	d909      	bls.n	8001502 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2203      	movs	r2, #3
 80014f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e13b      	b.n	800177a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1e4      	bne.n	80014de <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f023 031c 	bic.w	r3, r3, #28
 8001522:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001524:	f001 fb9c 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8001528:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4a78      	ldr	r2, [pc, #480]	; (8001710 <HAL_ETH_Init+0x2c4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d908      	bls.n	8001544 <HAL_ETH_Init+0xf8>
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	4a77      	ldr	r2, [pc, #476]	; (8001714 <HAL_ETH_Init+0x2c8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d804      	bhi.n	8001544 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	e027      	b.n	8001594 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	4a73      	ldr	r2, [pc, #460]	; (8001714 <HAL_ETH_Init+0x2c8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d908      	bls.n	800155e <HAL_ETH_Init+0x112>
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	4a72      	ldr	r2, [pc, #456]	; (8001718 <HAL_ETH_Init+0x2cc>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d804      	bhi.n	800155e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f043 030c 	orr.w	r3, r3, #12
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	e01a      	b.n	8001594 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4a6d      	ldr	r2, [pc, #436]	; (8001718 <HAL_ETH_Init+0x2cc>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d903      	bls.n	800156e <HAL_ETH_Init+0x122>
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4a6c      	ldr	r2, [pc, #432]	; (800171c <HAL_ETH_Init+0x2d0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d911      	bls.n	8001592 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4a6a      	ldr	r2, [pc, #424]	; (800171c <HAL_ETH_Init+0x2d0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d908      	bls.n	8001588 <HAL_ETH_Init+0x13c>
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	4a69      	ldr	r2, [pc, #420]	; (8001720 <HAL_ETH_Init+0x2d4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d804      	bhi.n	8001588 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	e005      	b.n	8001594 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f043 0310 	orr.w	r3, r3, #16
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	e000      	b.n	8001594 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001592:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800159c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015a0:	2100      	movs	r1, #0
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f956 	bl	8001854 <HAL_ETH_WritePHYRegister>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00b      	beq.n	80015c6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80015b2:	6939      	ldr	r1, [r7, #16]
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 f9b3 	bl	8001920 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0d9      	b.n	800177a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80015c6:	20ff      	movs	r0, #255	; 0xff
 80015c8:	f7ff fd7a 	bl	80010c0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80a7 	beq.w	8001724 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80015d6:	f7ff fd67 	bl	80010a8 <HAL_GetTick>
 80015da:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	461a      	mov	r2, r3
 80015e2:	2101      	movs	r1, #1
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f8cd 	bl	8001784 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80015ea:	f7ff fd5d 	bl	80010a8 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d90f      	bls.n	800161c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001600:	6939      	ldr	r1, [r7, #16]
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f98c 	bl	8001920 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e0ae      	b.n	800177a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0da      	beq.n	80015dc <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001626:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800162a:	2100      	movs	r1, #0
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f911 	bl	8001854 <HAL_ETH_WritePHYRegister>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00b      	beq.n	8001650 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800163c:	6939      	ldr	r1, [r7, #16]
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f96e 	bl	8001920 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800164c:	2301      	movs	r3, #1
 800164e:	e094      	b.n	800177a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001650:	f7ff fd2a 	bl	80010a8 <HAL_GetTick>
 8001654:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	461a      	mov	r2, r3
 800165c:	2101      	movs	r1, #1
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f890 	bl	8001784 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001664:	f7ff fd20 	bl	80010a8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d90f      	bls.n	8001696 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800167a:	6939      	ldr	r1, [r7, #16]
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f94f 	bl	8001920 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e071      	b.n	800177a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f003 0320 	and.w	r3, r3, #32
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0da      	beq.n	8001656 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	461a      	mov	r2, r3
 80016a6:	211f      	movs	r1, #31
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f86b 	bl	8001784 <HAL_ETH_ReadPHYRegister>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00b      	beq.n	80016cc <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016b8:	6939      	ldr	r1, [r7, #16]
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f930 	bl	8001920 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80016c8:	2301      	movs	r3, #1
 80016ca:	e056      	b.n	800177a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d004      	beq.n	80016e0 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	e002      	b.n	80016e6 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	e037      	b.n	8001768 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	e032      	b.n	8001768 <HAL_ETH_Init+0x31c>
 8001702:	bf00      	nop
 8001704:	03938700 	.word	0x03938700
 8001708:	40023800 	.word	0x40023800
 800170c:	40013800 	.word	0x40013800
 8001710:	01312cff 	.word	0x01312cff
 8001714:	02160ebf 	.word	0x02160ebf
 8001718:	039386ff 	.word	0x039386ff
 800171c:	05f5e0ff 	.word	0x05f5e0ff
 8001720:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	085b      	lsrs	r3, r3, #1
 8001732:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001734:	4313      	orrs	r3, r2
 8001736:	b29b      	uxth	r3, r3
 8001738:	461a      	mov	r2, r3
 800173a:	2100      	movs	r1, #0
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f889 	bl	8001854 <HAL_ETH_WritePHYRegister>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00b      	beq.n	8001760 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800174c:	6939      	ldr	r1, [r7, #16]
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f8e6 	bl	8001920 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e00c      	b.n	800177a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001760:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001764:	f7ff fcac 	bl	80010c0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001768:	6939      	ldr	r1, [r7, #16]
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f8d8 	bl	8001920 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop

08001784 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	460b      	mov	r3, r1
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b82      	cmp	r3, #130	; 0x82
 80017a4:	d101      	bne.n	80017aa <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80017a6:	2302      	movs	r3, #2
 80017a8:	e050      	b.n	800184c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2282      	movs	r2, #130	; 0x82
 80017ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f003 031c 	and.w	r3, r3, #28
 80017c0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8a1b      	ldrh	r3, [r3, #16]
 80017c6:	02db      	lsls	r3, r3, #11
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80017d0:	897b      	ldrh	r3, [r7, #10]
 80017d2:	019b      	lsls	r3, r3, #6
 80017d4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	4313      	orrs	r3, r2
 80017dc:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f023 0302 	bic.w	r3, r3, #2
 80017e4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80017f6:	f7ff fc57 	bl	80010a8 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017fc:	e015      	b.n	800182a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80017fe:	f7ff fc53 	bl	80010a8 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180c:	d309      	bcc.n	8001822 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e014      	b.n	800184c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1e4      	bne.n	80017fe <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	b29b      	uxth	r3, r3
 800183c:	461a      	mov	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	460b      	mov	r3, r1
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b42      	cmp	r3, #66	; 0x42
 8001874:	d101      	bne.n	800187a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001876:	2302      	movs	r3, #2
 8001878:	e04e      	b.n	8001918 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2242      	movs	r2, #66	; 0x42
 800187e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f003 031c 	and.w	r3, r3, #28
 8001890:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8a1b      	ldrh	r3, [r3, #16]
 8001896:	02db      	lsls	r3, r3, #11
 8001898:	b29b      	uxth	r3, r3
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4313      	orrs	r3, r2
 800189e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80018a0:	897b      	ldrh	r3, [r7, #10]
 80018a2:	019b      	lsls	r3, r3, #6
 80018a4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80018d0:	f7ff fbea 	bl	80010a8 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018d6:	e015      	b.n	8001904 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80018d8:	f7ff fbe6 	bl	80010a8 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e6:	d309      	bcc.n	80018fc <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e00d      	b.n	8001918 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1e4      	bne.n	80018d8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b0b0      	sub	sp, #192	; 0xc0
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d007      	beq.n	8001946 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800193c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001944:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800194e:	2300      	movs	r3, #0
 8001950:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d103      	bne.n	800196e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800196a:	663b      	str	r3, [r7, #96]	; 0x60
 800196c:	e001      	b.n	8001972 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001976:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800197c:	2300      	movs	r3, #0
 800197e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800198c:	2340      	movs	r3, #64	; 0x40
 800198e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80019f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019f8:	4bab      	ldr	r3, [pc, #684]	; (8001ca8 <ETH_MACDMAConfig+0x388>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001a00:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001a04:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001a08:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001a0c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001a12:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001a16:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001a1a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001a20:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001a24:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001a28:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001a2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001a2c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001a30:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001a34:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001a36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a48:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f7ff fb33 	bl	80010c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a62:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001a66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a68:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001a6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001a6c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001a6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001a72:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001a78:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001a7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001a7e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001a84:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001a88:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001a90:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a92:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f7ff fb0e 	bl	80010c0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aac:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ab6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001ac0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001acc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ad0:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001ada:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ade:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001ae0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001ae4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001ae6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001aea:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001aec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001af0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001af6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001af8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001afc:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001afe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b02:	4313      	orrs	r3, r2
 8001b04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b10:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	f7ff facf 	bl	80010c0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b2a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001b2c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001b30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f7ff faba 	bl	80010c0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b54:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001b5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b5e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001b64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b68:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b76:	2300      	movs	r3, #0
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001b84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b88:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b8e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b94:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001baa:	4413      	add	r3, r2
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001bb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <ETH_MACDMAConfig+0x38c>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001bbe:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001bc2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001bc4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001bc6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001bc8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001bca:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001bcc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001bce:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001bd0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001bd2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001bd6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001bda:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001bde:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001be0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001be4:	4313      	orrs	r3, r2
 8001be6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	f241 0318 	movw	r3, #4120	; 0x1018
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bf8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c02:	4413      	add	r3, r2
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f7ff fa58 	bl	80010c0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c18:	4413      	add	r3, r2
 8001c1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c1e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c24:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001c28:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001c2c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001c30:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c34:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001c36:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001c3a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c48:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f7ff fa31 	bl	80010c0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c6a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d10d      	bne.n	8001c90 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f241 031c 	movw	r3, #4124	; 0x101c
 8001c7c:	4413      	add	r3, r2
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6811      	ldr	r1, [r2, #0]
 8001c84:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <ETH_MACDMAConfig+0x390>)
 8001c86:	431a      	orrs	r2, r3
 8001c88:	f241 031c 	movw	r3, #4124	; 0x101c
 8001c8c:	440b      	add	r3, r1
 8001c8e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	461a      	mov	r2, r3
 8001c96:	2100      	movs	r1, #0
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f80b 	bl	8001cb4 <ETH_MACAddressConfig>
}
 8001c9e:	bf00      	nop
 8001ca0:	37c0      	adds	r7, #192	; 0xc0
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	ff20810f 	.word	0xff20810f
 8001cac:	f8de3f23 	.word	0xf8de3f23
 8001cb0:	00010040 	.word	0x00010040

08001cb4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3305      	adds	r3, #5
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	3204      	adds	r2, #4
 8001ccc:	7812      	ldrb	r2, [r2, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <ETH_MACAddressConfig+0x68>)
 8001cd6:	4413      	add	r3, r2
 8001cd8:	461a      	mov	r2, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3303      	adds	r3, #3
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	061a      	lsls	r2, r3, #24
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3302      	adds	r3, #2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	041b      	lsls	r3, r3, #16
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	7812      	ldrb	r2, [r2, #0]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <ETH_MACAddressConfig+0x6c>)
 8001d06:	4413      	add	r3, r2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	6013      	str	r3, [r2, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	371c      	adds	r7, #28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40028040 	.word	0x40028040
 8001d20:	40028044 	.word	0x40028044

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	; 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	e175      	b.n	8002030 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d44:	2201      	movs	r2, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	f040 8164 	bne.w	800202a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d00b      	beq.n	8001d82 <HAL_GPIO_Init+0x5e>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d007      	beq.n	8001d82 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d76:	2b11      	cmp	r3, #17
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b12      	cmp	r3, #18
 8001d80:	d130      	bne.n	8001de4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db8:	2201      	movs	r2, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 0201 	and.w	r2, r3, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x100>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b12      	cmp	r3, #18
 8001e22:	d123      	bne.n	8001e6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	08da      	lsrs	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3208      	adds	r2, #8
 8001e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	08da      	lsrs	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3208      	adds	r2, #8
 8001e66:	69b9      	ldr	r1, [r7, #24]
 8001e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0203 	and.w	r2, r3, #3
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80be 	beq.w	800202a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	4b65      	ldr	r3, [pc, #404]	; (8002044 <HAL_GPIO_Init+0x320>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	4a64      	ldr	r2, [pc, #400]	; (8002044 <HAL_GPIO_Init+0x320>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eba:	4b62      	ldr	r3, [pc, #392]	; (8002044 <HAL_GPIO_Init+0x320>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ec6:	4a60      	ldr	r2, [pc, #384]	; (8002048 <HAL_GPIO_Init+0x324>)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	3302      	adds	r3, #2
 8001ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	220f      	movs	r2, #15
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a57      	ldr	r2, [pc, #348]	; (800204c <HAL_GPIO_Init+0x328>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d037      	beq.n	8001f62 <HAL_GPIO_Init+0x23e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a56      	ldr	r2, [pc, #344]	; (8002050 <HAL_GPIO_Init+0x32c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d031      	beq.n	8001f5e <HAL_GPIO_Init+0x23a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a55      	ldr	r2, [pc, #340]	; (8002054 <HAL_GPIO_Init+0x330>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d02b      	beq.n	8001f5a <HAL_GPIO_Init+0x236>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a54      	ldr	r2, [pc, #336]	; (8002058 <HAL_GPIO_Init+0x334>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d025      	beq.n	8001f56 <HAL_GPIO_Init+0x232>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a53      	ldr	r2, [pc, #332]	; (800205c <HAL_GPIO_Init+0x338>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d01f      	beq.n	8001f52 <HAL_GPIO_Init+0x22e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_GPIO_Init+0x33c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d019      	beq.n	8001f4e <HAL_GPIO_Init+0x22a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a51      	ldr	r2, [pc, #324]	; (8002064 <HAL_GPIO_Init+0x340>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_GPIO_Init+0x226>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a50      	ldr	r2, [pc, #320]	; (8002068 <HAL_GPIO_Init+0x344>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00d      	beq.n	8001f46 <HAL_GPIO_Init+0x222>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4f      	ldr	r2, [pc, #316]	; (800206c <HAL_GPIO_Init+0x348>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <HAL_GPIO_Init+0x21e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <HAL_GPIO_Init+0x34c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d101      	bne.n	8001f3e <HAL_GPIO_Init+0x21a>
 8001f3a:	2309      	movs	r3, #9
 8001f3c:	e012      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f3e:	230a      	movs	r3, #10
 8001f40:	e010      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f42:	2308      	movs	r3, #8
 8001f44:	e00e      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f46:	2307      	movs	r3, #7
 8001f48:	e00c      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	e00a      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f4e:	2305      	movs	r3, #5
 8001f50:	e008      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f52:	2304      	movs	r3, #4
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f56:	2303      	movs	r3, #3
 8001f58:	e004      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e002      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f62:	2300      	movs	r3, #0
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	f002 0203 	and.w	r2, r2, #3
 8001f6a:	0092      	lsls	r2, r2, #2
 8001f6c:	4093      	lsls	r3, r2
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f74:	4934      	ldr	r1, [pc, #208]	; (8002048 <HAL_GPIO_Init+0x324>)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f82:	4b3c      	ldr	r3, [pc, #240]	; (8002074 <HAL_GPIO_Init+0x350>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa6:	4a33      	ldr	r2, [pc, #204]	; (8002074 <HAL_GPIO_Init+0x350>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fac:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_GPIO_Init+0x350>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fd0:	4a28      	ldr	r2, [pc, #160]	; (8002074 <HAL_GPIO_Init+0x350>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd6:	4b27      	ldr	r3, [pc, #156]	; (8002074 <HAL_GPIO_Init+0x350>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ffa:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <HAL_GPIO_Init+0x350>)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002000:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <HAL_GPIO_Init+0x350>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002024:	4a13      	ldr	r2, [pc, #76]	; (8002074 <HAL_GPIO_Init+0x350>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3301      	adds	r3, #1
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	2b0f      	cmp	r3, #15
 8002034:	f67f ae86 	bls.w	8001d44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002038:	bf00      	nop
 800203a:	3724      	adds	r7, #36	; 0x24
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	40023800 	.word	0x40023800
 8002048:	40013800 	.word	0x40013800
 800204c:	40020000 	.word	0x40020000
 8002050:	40020400 	.word	0x40020400
 8002054:	40020800 	.word	0x40020800
 8002058:	40020c00 	.word	0x40020c00
 800205c:	40021000 	.word	0x40021000
 8002060:	40021400 	.word	0x40021400
 8002064:	40021800 	.word	0x40021800
 8002068:	40021c00 	.word	0x40021c00
 800206c:	40022000 	.word	0x40022000
 8002070:	40022400 	.word	0x40022400
 8002074:	40013c00 	.word	0x40013c00

08002078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	807b      	strh	r3, [r7, #2]
 8002084:	4613      	mov	r3, r2
 8002086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002088:	787b      	ldrb	r3, [r7, #1]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208e:	887a      	ldrh	r2, [r7, #2]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002094:	e003      	b.n	800209e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002096:	887b      	ldrh	r3, [r7, #2]
 8002098:	041a      	lsls	r2, r3, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	619a      	str	r2, [r3, #24]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020bc:	887a      	ldrh	r2, [r7, #2]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	041a      	lsls	r2, r3, #16
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	400b      	ands	r3, r1
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	619a      	str	r2, [r3, #24]
}
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e0:	b08f      	sub	sp, #60	; 0x3c
 80020e2:	af0a      	add	r7, sp, #40	; 0x28
 80020e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e116      	b.n	800231e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fe76 	bl	8000dfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2203      	movs	r2, #3
 8002114:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f002 ff62 	bl	8004ff8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	687e      	ldr	r6, [r7, #4]
 800213c:	466d      	mov	r5, sp
 800213e:	f106 0410 	add.w	r4, r6, #16
 8002142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800214e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002152:	1d33      	adds	r3, r6, #4
 8002154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002156:	6838      	ldr	r0, [r7, #0]
 8002158:	f002 fef6 	bl	8004f48 <USB_CoreInit>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e0d7      	b.n	800231e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f002 ff50 	bl	800501a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
 800217e:	e04a      	b.n	8002216 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	333d      	adds	r3, #61	; 0x3d
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	333c      	adds	r3, #60	; 0x3c
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	b298      	uxth	r0, r3
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	3342      	adds	r3, #66	; 0x42
 80021bc:	4602      	mov	r2, r0
 80021be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	333f      	adds	r3, #63	; 0x3f
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	3344      	adds	r3, #68	; 0x44
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	3348      	adds	r3, #72	; 0x48
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	3350      	adds	r3, #80	; 0x50
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	3301      	adds	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	d3af      	bcc.n	8002180 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	e044      	b.n	80022b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	3301      	adds	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d3b5      	bcc.n	8002226 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	687e      	ldr	r6, [r7, #4]
 80022c2:	466d      	mov	r5, sp
 80022c4:	f106 0410 	add.w	r4, r6, #16
 80022c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80022d8:	1d33      	adds	r3, r6, #4
 80022da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022dc:	6838      	ldr	r0, [r7, #0]
 80022de:	f002 fec7 	bl	8005070 <USB_DevInit>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e014      	b.n	800231e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	2b01      	cmp	r3, #1
 800230a:	d102      	bne.n	8002312 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f80b 	bl	8002328 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f003 f879 	bl	800540e <USB_DevDisconnect>

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002328 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_PCDEx_ActivateLPM+0x44>)
 8002358:	4313      	orrs	r3, r2
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	10000003 	.word	0x10000003

08002370 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800237a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40007000 	.word	0x40007000

08002390 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002398:	2300      	movs	r3, #0
 800239a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e291      	b.n	80028ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8087 	beq.w	80024c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b4:	4b96      	ldr	r3, [pc, #600]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d00c      	beq.n	80023da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c0:	4b93      	ldr	r3, [pc, #588]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d112      	bne.n	80023f2 <HAL_RCC_OscConfig+0x62>
 80023cc:	4b90      	ldr	r3, [pc, #576]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023d8:	d10b      	bne.n	80023f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023da:	4b8d      	ldr	r3, [pc, #564]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d06c      	beq.n	80024c0 <HAL_RCC_OscConfig+0x130>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d168      	bne.n	80024c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e26b      	b.n	80028ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x7a>
 80023fc:	4b84      	ldr	r3, [pc, #528]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a83      	ldr	r2, [pc, #524]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 8002402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	e02e      	b.n	8002468 <HAL_RCC_OscConfig+0xd8>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10c      	bne.n	800242c <HAL_RCC_OscConfig+0x9c>
 8002412:	4b7f      	ldr	r3, [pc, #508]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a7e      	ldr	r2, [pc, #504]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 8002418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	4b7c      	ldr	r3, [pc, #496]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a7b      	ldr	r2, [pc, #492]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 8002424:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e01d      	b.n	8002468 <HAL_RCC_OscConfig+0xd8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0xc0>
 8002436:	4b76      	ldr	r3, [pc, #472]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a75      	ldr	r2, [pc, #468]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 800243c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b73      	ldr	r3, [pc, #460]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a72      	ldr	r2, [pc, #456]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 8002448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e00b      	b.n	8002468 <HAL_RCC_OscConfig+0xd8>
 8002450:	4b6f      	ldr	r3, [pc, #444]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a6e      	ldr	r2, [pc, #440]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 8002456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	4b6c      	ldr	r3, [pc, #432]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a6b      	ldr	r2, [pc, #428]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 8002462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d013      	beq.n	8002498 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fe1a 	bl	80010a8 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002478:	f7fe fe16 	bl	80010a8 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	; 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e21f      	b.n	80028ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b61      	ldr	r3, [pc, #388]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0xe8>
 8002496:	e014      	b.n	80024c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fe06 	bl	80010a8 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7fe fe02 	bl	80010a8 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e20b      	b.n	80028ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b2:	4b57      	ldr	r3, [pc, #348]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x110>
 80024be:	e000      	b.n	80024c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d069      	beq.n	80025a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ce:	4b50      	ldr	r3, [pc, #320]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024da:	4b4d      	ldr	r3, [pc, #308]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d11c      	bne.n	8002520 <HAL_RCC_OscConfig+0x190>
 80024e6:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d116      	bne.n	8002520 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_RCC_OscConfig+0x17a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d001      	beq.n	800250a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e1df      	b.n	80028ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	493d      	ldr	r1, [pc, #244]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	e040      	b.n	80025a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d023      	beq.n	8002570 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002528:	4b39      	ldr	r3, [pc, #228]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a38      	ldr	r2, [pc, #224]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fdb8 	bl	80010a8 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253c:	f7fe fdb4 	bl	80010a8 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1bd      	b.n	80028ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255a:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4929      	ldr	r1, [pc, #164]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
 800256e:	e018      	b.n	80025a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002570:	4b27      	ldr	r3, [pc, #156]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a26      	ldr	r2, [pc, #152]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 8002576:	f023 0301 	bic.w	r3, r3, #1
 800257a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7fe fd94 	bl	80010a8 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002584:	f7fe fd90 	bl	80010a8 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e199      	b.n	80028ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002596:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d038      	beq.n	8002620 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d019      	beq.n	80025ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 80025b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ba:	4a15      	ldr	r2, [pc, #84]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c2:	f7fe fd71 	bl	80010a8 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ca:	f7fe fd6d 	bl	80010a8 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e176      	b.n	80028ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 80025de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x23a>
 80025e8:	e01a      	b.n	8002620 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 80025ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ee:	4a08      	ldr	r2, [pc, #32]	; (8002610 <HAL_RCC_OscConfig+0x280>)
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f6:	f7fe fd57 	bl	80010a8 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fe:	f7fe fd53 	bl	80010a8 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d903      	bls.n	8002614 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e15c      	b.n	80028ca <HAL_RCC_OscConfig+0x53a>
 8002610:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002614:	4b91      	ldr	r3, [pc, #580]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 8002616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1ee      	bne.n	80025fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80a4 	beq.w	8002776 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800262e:	4b8b      	ldr	r3, [pc, #556]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10d      	bne.n	8002656 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	4b88      	ldr	r3, [pc, #544]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a87      	ldr	r2, [pc, #540]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 8002640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b85      	ldr	r3, [pc, #532]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002652:	2301      	movs	r3, #1
 8002654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002656:	4b82      	ldr	r3, [pc, #520]	; (8002860 <HAL_RCC_OscConfig+0x4d0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d118      	bne.n	8002694 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002662:	4b7f      	ldr	r3, [pc, #508]	; (8002860 <HAL_RCC_OscConfig+0x4d0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a7e      	ldr	r2, [pc, #504]	; (8002860 <HAL_RCC_OscConfig+0x4d0>)
 8002668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266e:	f7fe fd1b 	bl	80010a8 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002676:	f7fe fd17 	bl	80010a8 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b64      	cmp	r3, #100	; 0x64
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e120      	b.n	80028ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002688:	4b75      	ldr	r3, [pc, #468]	; (8002860 <HAL_RCC_OscConfig+0x4d0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d106      	bne.n	80026aa <HAL_RCC_OscConfig+0x31a>
 800269c:	4b6f      	ldr	r3, [pc, #444]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	4a6e      	ldr	r2, [pc, #440]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6713      	str	r3, [r2, #112]	; 0x70
 80026a8:	e02d      	b.n	8002706 <HAL_RCC_OscConfig+0x376>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10c      	bne.n	80026cc <HAL_RCC_OscConfig+0x33c>
 80026b2:	4b6a      	ldr	r3, [pc, #424]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	4a69      	ldr	r2, [pc, #420]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	6713      	str	r3, [r2, #112]	; 0x70
 80026be:	4b67      	ldr	r3, [pc, #412]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	4a66      	ldr	r2, [pc, #408]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 80026c4:	f023 0304 	bic.w	r3, r3, #4
 80026c8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ca:	e01c      	b.n	8002706 <HAL_RCC_OscConfig+0x376>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	d10c      	bne.n	80026ee <HAL_RCC_OscConfig+0x35e>
 80026d4:	4b61      	ldr	r3, [pc, #388]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	4a60      	ldr	r2, [pc, #384]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 80026da:	f043 0304 	orr.w	r3, r3, #4
 80026de:	6713      	str	r3, [r2, #112]	; 0x70
 80026e0:	4b5e      	ldr	r3, [pc, #376]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 80026e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e4:	4a5d      	ldr	r2, [pc, #372]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6713      	str	r3, [r2, #112]	; 0x70
 80026ec:	e00b      	b.n	8002706 <HAL_RCC_OscConfig+0x376>
 80026ee:	4b5b      	ldr	r3, [pc, #364]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	4a5a      	ldr	r2, [pc, #360]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	6713      	str	r3, [r2, #112]	; 0x70
 80026fa:	4b58      	ldr	r3, [pc, #352]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fe:	4a57      	ldr	r2, [pc, #348]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 8002700:	f023 0304 	bic.w	r3, r3, #4
 8002704:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d015      	beq.n	800273a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7fe fccb 	bl	80010a8 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002714:	e00a      	b.n	800272c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002716:	f7fe fcc7 	bl	80010a8 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	f241 3288 	movw	r2, #5000	; 0x1388
 8002724:	4293      	cmp	r3, r2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e0ce      	b.n	80028ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272c:	4b4b      	ldr	r3, [pc, #300]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0ee      	beq.n	8002716 <HAL_RCC_OscConfig+0x386>
 8002738:	e014      	b.n	8002764 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273a:	f7fe fcb5 	bl	80010a8 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7fe fcb1 	bl	80010a8 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002750:	4293      	cmp	r3, r2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e0b8      	b.n	80028ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002758:	4b40      	ldr	r3, [pc, #256]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ee      	bne.n	8002742 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002764:	7dfb      	ldrb	r3, [r7, #23]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d105      	bne.n	8002776 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276a:	4b3c      	ldr	r3, [pc, #240]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	4a3b      	ldr	r2, [pc, #236]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 8002770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002774:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 80a4 	beq.w	80028c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002780:	4b36      	ldr	r3, [pc, #216]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b08      	cmp	r3, #8
 800278a:	d06b      	beq.n	8002864 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d149      	bne.n	8002828 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002794:	4b31      	ldr	r3, [pc, #196]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a30      	ldr	r2, [pc, #192]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 800279a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800279e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7fe fc82 	bl	80010a8 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fe fc7e 	bl	80010a8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e087      	b.n	80028ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	4b28      	ldr	r3, [pc, #160]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69da      	ldr	r2, [r3, #28]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	019b      	lsls	r3, r3, #6
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	085b      	lsrs	r3, r3, #1
 80027de:	3b01      	subs	r3, #1
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	4313      	orrs	r3, r2
 80027ec:	4a1b      	ldr	r2, [pc, #108]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 80027ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027f2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a18      	ldr	r2, [pc, #96]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 80027fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fc52 	bl	80010a8 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fc4e 	bl	80010a8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e057      	b.n	80028ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x478>
 8002826:	e04f      	b.n	80028c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0b      	ldr	r2, [pc, #44]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 800282e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe fc38 	bl	80010a8 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283c:	f7fe fc34 	bl	80010a8 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e03d      	b.n	80028ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_RCC_OscConfig+0x4cc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x4ac>
 800285a:	e035      	b.n	80028c8 <HAL_RCC_OscConfig+0x538>
 800285c:	40023800 	.word	0x40023800
 8002860:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002864:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <HAL_RCC_OscConfig+0x544>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d028      	beq.n	80028c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d121      	bne.n	80028c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d11a      	bne.n	80028c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002894:	4013      	ands	r3, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800289a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800289c:	4293      	cmp	r3, r2
 800289e:	d111      	bne.n	80028c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	085b      	lsrs	r3, r3, #1
 80028ac:	3b01      	subs	r3, #1
 80028ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800

080028d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0d0      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f0:	4b6a      	ldr	r3, [pc, #424]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d910      	bls.n	8002920 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 020f 	bic.w	r2, r3, #15
 8002906:	4965      	ldr	r1, [pc, #404]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0b8      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002938:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800293e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002942:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002950:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a52      	ldr	r2, [pc, #328]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800295a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295c:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	494d      	ldr	r1, [pc, #308]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d040      	beq.n	80029fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d115      	bne.n	80029ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e07f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	4b41      	ldr	r3, [pc, #260]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e073      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e06b      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4936      	ldr	r1, [pc, #216]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029cc:	f7fe fb6c 	bl	80010a8 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7fe fb68 	bl	80010a8 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e053      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d210      	bcs.n	8002a2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 020f 	bic.w	r2, r3, #15
 8002a12:	4922      	ldr	r1, [pc, #136]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e032      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4916      	ldr	r1, [pc, #88]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	490e      	ldr	r1, [pc, #56]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a6a:	f000 f821 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 8002a6e:	4601      	mov	r1, r0
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x1cc>)
 8002a7c:	5cd3      	ldrb	r3, [r2, r3]
 8002a7e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <HAL_RCC_ClockConfig+0x1d0>)
 8002a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1d4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe fac8 	bl	8001020 <HAL_InitTick>

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023c00 	.word	0x40023c00
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	08005d58 	.word	0x08005d58
 8002aa8:	20000000 	.word	0x20000000
 8002aac:	20000004 	.word	0x20000004

08002ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ac6:	4b63      	ldr	r3, [pc, #396]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d007      	beq.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x32>
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d008      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x38>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 80b4 	bne.w	8002c44 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002adc:	4b5e      	ldr	r3, [pc, #376]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ade:	60bb      	str	r3, [r7, #8]
      break;
 8002ae0:	e0b3      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ae2:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ae4:	60bb      	str	r3, [r7, #8]
      break;
 8002ae6:	e0b0      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae8:	4b5a      	ldr	r3, [pc, #360]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002af2:	4b58      	ldr	r3, [pc, #352]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d04a      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afe:	4b55      	ldr	r3, [pc, #340]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	099b      	lsrs	r3, r3, #6
 8002b04:	f04f 0400 	mov.w	r4, #0
 8002b08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	ea03 0501 	and.w	r5, r3, r1
 8002b14:	ea04 0602 	and.w	r6, r4, r2
 8002b18:	4629      	mov	r1, r5
 8002b1a:	4632      	mov	r2, r6
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	f04f 0400 	mov.w	r4, #0
 8002b24:	0154      	lsls	r4, r2, #5
 8002b26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b2a:	014b      	lsls	r3, r1, #5
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4622      	mov	r2, r4
 8002b30:	1b49      	subs	r1, r1, r5
 8002b32:	eb62 0206 	sbc.w	r2, r2, r6
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	f04f 0400 	mov.w	r4, #0
 8002b3e:	0194      	lsls	r4, r2, #6
 8002b40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b44:	018b      	lsls	r3, r1, #6
 8002b46:	1a5b      	subs	r3, r3, r1
 8002b48:	eb64 0402 	sbc.w	r4, r4, r2
 8002b4c:	f04f 0100 	mov.w	r1, #0
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	00e2      	lsls	r2, r4, #3
 8002b56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b5a:	00d9      	lsls	r1, r3, #3
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4614      	mov	r4, r2
 8002b60:	195b      	adds	r3, r3, r5
 8002b62:	eb44 0406 	adc.w	r4, r4, r6
 8002b66:	f04f 0100 	mov.w	r1, #0
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	0262      	lsls	r2, r4, #9
 8002b70:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b74:	0259      	lsls	r1, r3, #9
 8002b76:	460b      	mov	r3, r1
 8002b78:	4614      	mov	r4, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	4621      	mov	r1, r4
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f04f 0400 	mov.w	r4, #0
 8002b84:	461a      	mov	r2, r3
 8002b86:	4623      	mov	r3, r4
 8002b88:	f7fd fb92 	bl	80002b0 <__aeabi_uldivmod>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	460c      	mov	r4, r1
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	e049      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b94:	4b2f      	ldr	r3, [pc, #188]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	099b      	lsrs	r3, r3, #6
 8002b9a:	f04f 0400 	mov.w	r4, #0
 8002b9e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	ea03 0501 	and.w	r5, r3, r1
 8002baa:	ea04 0602 	and.w	r6, r4, r2
 8002bae:	4629      	mov	r1, r5
 8002bb0:	4632      	mov	r2, r6
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	f04f 0400 	mov.w	r4, #0
 8002bba:	0154      	lsls	r4, r2, #5
 8002bbc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bc0:	014b      	lsls	r3, r1, #5
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4622      	mov	r2, r4
 8002bc6:	1b49      	subs	r1, r1, r5
 8002bc8:	eb62 0206 	sbc.w	r2, r2, r6
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	f04f 0400 	mov.w	r4, #0
 8002bd4:	0194      	lsls	r4, r2, #6
 8002bd6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bda:	018b      	lsls	r3, r1, #6
 8002bdc:	1a5b      	subs	r3, r3, r1
 8002bde:	eb64 0402 	sbc.w	r4, r4, r2
 8002be2:	f04f 0100 	mov.w	r1, #0
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	00e2      	lsls	r2, r4, #3
 8002bec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bf0:	00d9      	lsls	r1, r3, #3
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4614      	mov	r4, r2
 8002bf6:	195b      	adds	r3, r3, r5
 8002bf8:	eb44 0406 	adc.w	r4, r4, r6
 8002bfc:	f04f 0100 	mov.w	r1, #0
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	02a2      	lsls	r2, r4, #10
 8002c06:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c0a:	0299      	lsls	r1, r3, #10
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4614      	mov	r4, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	4621      	mov	r1, r4
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f04f 0400 	mov.w	r4, #0
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4623      	mov	r3, r4
 8002c1e:	f7fd fb47 	bl	80002b0 <__aeabi_uldivmod>
 8002c22:	4603      	mov	r3, r0
 8002c24:	460c      	mov	r4, r1
 8002c26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	3301      	adds	r3, #1
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c40:	60bb      	str	r3, [r7, #8]
      break;
 8002c42:	e002      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c46:	60bb      	str	r3, [r7, #8]
      break;
 8002c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	00f42400 	.word	0x00f42400
 8002c5c:	007a1200 	.word	0x007a1200

08002c60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c64:	4b03      	ldr	r3, [pc, #12]	; (8002c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20000000 	.word	0x20000000

08002c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c7c:	f7ff fff0 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002c80:	4601      	mov	r1, r0
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	0a9b      	lsrs	r3, r3, #10
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	4a03      	ldr	r2, [pc, #12]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c8e:	5cd3      	ldrb	r3, [r2, r3]
 8002c90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	08005d68 	.word	0x08005d68

08002ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ca4:	f7ff ffdc 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002ca8:	4601      	mov	r1, r0
 8002caa:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	0b5b      	lsrs	r3, r3, #13
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	4a03      	ldr	r2, [pc, #12]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	08005d68 	.word	0x08005d68

08002cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d012      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cf0:	4b69      	ldr	r3, [pc, #420]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4a68      	ldr	r2, [pc, #416]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cfa:	6093      	str	r3, [r2, #8]
 8002cfc:	4b66      	ldr	r3, [pc, #408]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d04:	4964      	ldr	r1, [pc, #400]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d017      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d22:	4b5d      	ldr	r3, [pc, #372]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d30:	4959      	ldr	r1, [pc, #356]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d40:	d101      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d42:	2301      	movs	r3, #1
 8002d44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d017      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d5e:	4b4e      	ldr	r3, [pc, #312]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	494a      	ldr	r1, [pc, #296]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 808b 	beq.w	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dac:	4b3a      	ldr	r3, [pc, #232]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	4a39      	ldr	r2, [pc, #228]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db6:	6413      	str	r3, [r2, #64]	; 0x40
 8002db8:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dc4:	4b35      	ldr	r3, [pc, #212]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a34      	ldr	r2, [pc, #208]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd0:	f7fe f96a 	bl	80010a8 <HAL_GetTick>
 8002dd4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd8:	f7fe f966 	bl	80010a8 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e357      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dea:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002df6:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d035      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d02e      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e14:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e1e:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e28:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	4a1a      	ldr	r2, [pc, #104]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e36:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e3c:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d114      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe f92e 	bl	80010a8 <HAL_GetTick>
 8002e4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e50:	f7fe f92a 	bl	80010a8 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e319      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0ee      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e7e:	d111      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e8e:	400b      	ands	r3, r1
 8002e90:	4901      	ldr	r1, [pc, #4]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40007000 	.word	0x40007000
 8002ea0:	0ffffcff 	.word	0x0ffffcff
 8002ea4:	4bb1      	ldr	r3, [pc, #708]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4ab0      	ldr	r2, [pc, #704]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eaa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002eae:	6093      	str	r3, [r2, #8]
 8002eb0:	4bae      	ldr	r3, [pc, #696]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebc:	49ab      	ldr	r1, [pc, #684]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d010      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ece:	4ba7      	ldr	r3, [pc, #668]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed4:	4aa5      	ldr	r2, [pc, #660]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ede:	4ba3      	ldr	r3, [pc, #652]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ee0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	49a0      	ldr	r1, [pc, #640]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002efc:	4b9b      	ldr	r3, [pc, #620]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f0a:	4998      	ldr	r1, [pc, #608]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f1e:	4b93      	ldr	r3, [pc, #588]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f2c:	498f      	ldr	r1, [pc, #572]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f40:	4b8a      	ldr	r3, [pc, #552]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f4e:	4987      	ldr	r1, [pc, #540]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f62:	4b82      	ldr	r3, [pc, #520]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	497e      	ldr	r1, [pc, #504]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f84:	4b79      	ldr	r3, [pc, #484]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	f023 0203 	bic.w	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	4976      	ldr	r1, [pc, #472]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fa6:	4b71      	ldr	r3, [pc, #452]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fac:	f023 020c 	bic.w	r2, r3, #12
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb4:	496d      	ldr	r1, [pc, #436]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fc8:	4b68      	ldr	r3, [pc, #416]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd6:	4965      	ldr	r1, [pc, #404]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fea:	4b60      	ldr	r3, [pc, #384]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff8:	495c      	ldr	r1, [pc, #368]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00a      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800300c:	4b57      	ldr	r3, [pc, #348]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301a:	4954      	ldr	r1, [pc, #336]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800302e:	4b4f      	ldr	r3, [pc, #316]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003034:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303c:	494b      	ldr	r1, [pc, #300]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003050:	4b46      	ldr	r3, [pc, #280]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305e:	4943      	ldr	r1, [pc, #268]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003072:	4b3e      	ldr	r3, [pc, #248]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003080:	493a      	ldr	r1, [pc, #232]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003094:	4b35      	ldr	r3, [pc, #212]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030a2:	4932      	ldr	r1, [pc, #200]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d011      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030b6:	4b2d      	ldr	r3, [pc, #180]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c4:	4929      	ldr	r1, [pc, #164]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030d4:	d101      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80030d6:	2301      	movs	r3, #1
 80030d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80030e6:	2301      	movs	r3, #1
 80030e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003104:	4919      	ldr	r1, [pc, #100]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00b      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003118:	4b14      	ldr	r3, [pc, #80]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003128:	4910      	ldr	r1, [pc, #64]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d006      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80d9 	beq.w	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a08      	ldr	r2, [pc, #32]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800314a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800314e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003150:	f7fd ffaa 	bl	80010a8 <HAL_GetTick>
 8003154:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003156:	e00b      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003158:	f7fd ffa6 	bl	80010a8 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d904      	bls.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e197      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003170:	4b6c      	ldr	r3, [pc, #432]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1ed      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d021      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318c:	2b00      	cmp	r3, #0
 800318e:	d11d      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003190:	4b64      	ldr	r3, [pc, #400]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800319e:	4b61      	ldr	r3, [pc, #388]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a4:	0e1b      	lsrs	r3, r3, #24
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	019a      	lsls	r2, r3, #6
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	041b      	lsls	r3, r3, #16
 80031b6:	431a      	orrs	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	061b      	lsls	r3, r3, #24
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	071b      	lsls	r3, r3, #28
 80031c4:	4957      	ldr	r1, [pc, #348]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d004      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d02e      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f6:	d129      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031f8:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031fe:	0c1b      	lsrs	r3, r3, #16
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003206:	4b47      	ldr	r3, [pc, #284]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320c:	0f1b      	lsrs	r3, r3, #28
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	019a      	lsls	r2, r3, #6
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	431a      	orrs	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	071b      	lsls	r3, r3, #28
 800322c:	493d      	ldr	r1, [pc, #244]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003234:	4b3b      	ldr	r3, [pc, #236]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800323a:	f023 021f 	bic.w	r2, r3, #31
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	3b01      	subs	r3, #1
 8003244:	4937      	ldr	r1, [pc, #220]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01d      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003258:	4b32      	ldr	r3, [pc, #200]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800325a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800325e:	0e1b      	lsrs	r3, r3, #24
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003266:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326c:	0f1b      	lsrs	r3, r3, #28
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	019a      	lsls	r2, r3, #6
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	041b      	lsls	r3, r3, #16
 8003280:	431a      	orrs	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	431a      	orrs	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	071b      	lsls	r3, r3, #28
 800328c:	4925      	ldr	r1, [pc, #148]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d011      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	019a      	lsls	r2, r3, #6
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	041b      	lsls	r3, r3, #16
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	061b      	lsls	r3, r3, #24
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	071b      	lsls	r3, r3, #28
 80032bc:	4919      	ldr	r1, [pc, #100]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032c4:	4b17      	ldr	r3, [pc, #92]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a16      	ldr	r2, [pc, #88]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d0:	f7fd feea 	bl	80010a8 <HAL_GetTick>
 80032d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032d8:	f7fd fee6 	bl	80010a8 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e0d7      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032ea:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	f040 80cd 	bne.w	8003498 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a08      	ldr	r2, [pc, #32]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330a:	f7fd fecd 	bl	80010a8 <HAL_GetTick>
 800330e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003310:	e00a      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003312:	f7fd fec9 	bl	80010a8 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b64      	cmp	r3, #100	; 0x64
 800331e:	d903      	bls.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e0ba      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003324:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003328:	4b5e      	ldr	r3, [pc, #376]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003334:	d0ed      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003352:	2b00      	cmp	r3, #0
 8003354:	d02e      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d12a      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800335e:	4b51      	ldr	r3, [pc, #324]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003364:	0c1b      	lsrs	r3, r3, #16
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800336c:	4b4d      	ldr	r3, [pc, #308]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003372:	0f1b      	lsrs	r3, r3, #28
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	019a      	lsls	r2, r3, #6
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	061b      	lsls	r3, r3, #24
 800338c:	431a      	orrs	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	071b      	lsls	r3, r3, #28
 8003392:	4944      	ldr	r1, [pc, #272]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800339a:	4b42      	ldr	r3, [pc, #264]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800339c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	3b01      	subs	r3, #1
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	493d      	ldr	r1, [pc, #244]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d022      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033c8:	d11d      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033ca:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	0e1b      	lsrs	r3, r3, #24
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033d8:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033de:	0f1b      	lsrs	r3, r3, #28
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	019a      	lsls	r2, r3, #6
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	041b      	lsls	r3, r3, #16
 80033f2:	431a      	orrs	r2, r3
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	061b      	lsls	r3, r3, #24
 80033f8:	431a      	orrs	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	071b      	lsls	r3, r3, #28
 80033fe:	4929      	ldr	r1, [pc, #164]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d028      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003412:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003418:	0e1b      	lsrs	r3, r3, #24
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003420:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	019a      	lsls	r2, r3, #6
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	041b      	lsls	r3, r3, #16
 8003438:	431a      	orrs	r2, r3
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	061b      	lsls	r3, r3, #24
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	071b      	lsls	r3, r3, #28
 8003446:	4917      	ldr	r1, [pc, #92]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800344e:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003454:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	4911      	ldr	r1, [pc, #68]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0e      	ldr	r2, [pc, #56]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800346a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003470:	f7fd fe1a 	bl	80010a8 <HAL_GetTick>
 8003474:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003476:	e008      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003478:	f7fd fe16 	bl	80010a8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e007      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003496:	d1ef      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800

080034a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e049      	b.n	800354e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fc24 	bl	8000d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f000 fab0 	bl	8003a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d001      	beq.n	8003570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e054      	b.n	800361a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a26      	ldr	r2, [pc, #152]	; (8003628 <HAL_TIM_Base_Start_IT+0xd0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d022      	beq.n	80035d8 <HAL_TIM_Base_Start_IT+0x80>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359a:	d01d      	beq.n	80035d8 <HAL_TIM_Base_Start_IT+0x80>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a22      	ldr	r2, [pc, #136]	; (800362c <HAL_TIM_Base_Start_IT+0xd4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d018      	beq.n	80035d8 <HAL_TIM_Base_Start_IT+0x80>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a21      	ldr	r2, [pc, #132]	; (8003630 <HAL_TIM_Base_Start_IT+0xd8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d013      	beq.n	80035d8 <HAL_TIM_Base_Start_IT+0x80>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1f      	ldr	r2, [pc, #124]	; (8003634 <HAL_TIM_Base_Start_IT+0xdc>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00e      	beq.n	80035d8 <HAL_TIM_Base_Start_IT+0x80>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1e      	ldr	r2, [pc, #120]	; (8003638 <HAL_TIM_Base_Start_IT+0xe0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d009      	beq.n	80035d8 <HAL_TIM_Base_Start_IT+0x80>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1c      	ldr	r2, [pc, #112]	; (800363c <HAL_TIM_Base_Start_IT+0xe4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_TIM_Base_Start_IT+0x80>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1b      	ldr	r2, [pc, #108]	; (8003640 <HAL_TIM_Base_Start_IT+0xe8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d115      	bne.n	8003604 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_TIM_Base_Start_IT+0xec>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b06      	cmp	r3, #6
 80035e8:	d015      	beq.n	8003616 <HAL_TIM_Base_Start_IT+0xbe>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f0:	d011      	beq.n	8003616 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003602:	e008      	b.n	8003616 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e000      	b.n	8003618 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003616:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40010000 	.word	0x40010000
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800
 8003634:	40000c00 	.word	0x40000c00
 8003638:	40010400 	.word	0x40010400
 800363c:	40014000 	.word	0x40014000
 8003640:	40001800 	.word	0x40001800
 8003644:	00010007 	.word	0x00010007

08003648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b02      	cmp	r3, #2
 800365c:	d122      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b02      	cmp	r3, #2
 800366a:	d11b      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0202 	mvn.w	r2, #2
 8003674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f9c0 	bl	8003a10 <HAL_TIM_IC_CaptureCallback>
 8003690:	e005      	b.n	800369e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f9b2 	bl	80039fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f9c3 	bl	8003a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d122      	bne.n	80036f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d11b      	bne.n	80036f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0204 	mvn.w	r2, #4
 80036c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2202      	movs	r2, #2
 80036ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f996 	bl	8003a10 <HAL_TIM_IC_CaptureCallback>
 80036e4:	e005      	b.n	80036f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f988 	bl	80039fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f999 	bl	8003a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b08      	cmp	r3, #8
 8003704:	d122      	bne.n	800374c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b08      	cmp	r3, #8
 8003712:	d11b      	bne.n	800374c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0208 	mvn.w	r2, #8
 800371c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2204      	movs	r2, #4
 8003722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f96c 	bl	8003a10 <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f95e 	bl	80039fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f96f 	bl	8003a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b10      	cmp	r3, #16
 8003758:	d122      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b10      	cmp	r3, #16
 8003766:	d11b      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0210 	mvn.w	r2, #16
 8003770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2208      	movs	r2, #8
 8003776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f942 	bl	8003a10 <HAL_TIM_IC_CaptureCallback>
 800378c:	e005      	b.n	800379a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f934 	bl	80039fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f945 	bl	8003a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d10e      	bne.n	80037cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d107      	bne.n	80037cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0201 	mvn.w	r2, #1
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd f950 	bl	8000a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	2b80      	cmp	r3, #128	; 0x80
 80037d8:	d10e      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e4:	2b80      	cmp	r3, #128	; 0x80
 80037e6:	d107      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fafc 	bl	8003df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003806:	d10e      	bne.n	8003826 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003812:	2b80      	cmp	r3, #128	; 0x80
 8003814:	d107      	bne.n	8003826 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800381e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 faef 	bl	8003e04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003830:	2b40      	cmp	r3, #64	; 0x40
 8003832:	d10e      	bne.n	8003852 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b40      	cmp	r3, #64	; 0x40
 8003840:	d107      	bne.n	8003852 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800384a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f8f3 	bl	8003a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b20      	cmp	r3, #32
 800385e:	d10e      	bne.n	800387e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b20      	cmp	r3, #32
 800386c:	d107      	bne.n	800387e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f06f 0220 	mvn.w	r2, #32
 8003876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 faaf 	bl	8003ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_TIM_ConfigClockSource+0x18>
 800389c:	2302      	movs	r3, #2
 800389e:	e0a6      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x166>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4b4f      	ldr	r3, [pc, #316]	; (80039f8 <HAL_TIM_ConfigClockSource+0x170>)
 80038bc:	4013      	ands	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d067      	beq.n	80039a8 <HAL_TIM_ConfigClockSource+0x120>
 80038d8:	2b40      	cmp	r3, #64	; 0x40
 80038da:	d80b      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x6c>
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d073      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0x140>
 80038e0:	2b10      	cmp	r3, #16
 80038e2:	d802      	bhi.n	80038ea <HAL_TIM_ConfigClockSource+0x62>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d06f      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80038e8:	e078      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d06c      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0x140>
 80038ee:	2b30      	cmp	r3, #48	; 0x30
 80038f0:	d06a      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80038f2:	e073      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038f4:	2b70      	cmp	r3, #112	; 0x70
 80038f6:	d00d      	beq.n	8003914 <HAL_TIM_ConfigClockSource+0x8c>
 80038f8:	2b70      	cmp	r3, #112	; 0x70
 80038fa:	d804      	bhi.n	8003906 <HAL_TIM_ConfigClockSource+0x7e>
 80038fc:	2b50      	cmp	r3, #80	; 0x50
 80038fe:	d033      	beq.n	8003968 <HAL_TIM_ConfigClockSource+0xe0>
 8003900:	2b60      	cmp	r3, #96	; 0x60
 8003902:	d041      	beq.n	8003988 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003904:	e06a      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390a:	d066      	beq.n	80039da <HAL_TIM_ConfigClockSource+0x152>
 800390c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003910:	d017      	beq.n	8003942 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003912:	e063      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	6899      	ldr	r1, [r3, #8]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f000 f9ac 	bl	8003c80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003936:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	609a      	str	r2, [r3, #8]
      break;
 8003940:	e04c      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6899      	ldr	r1, [r3, #8]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f000 f995 	bl	8003c80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003964:	609a      	str	r2, [r3, #8]
      break;
 8003966:	e039      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	6859      	ldr	r1, [r3, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	461a      	mov	r2, r3
 8003976:	f000 f909 	bl	8003b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2150      	movs	r1, #80	; 0x50
 8003980:	4618      	mov	r0, r3
 8003982:	f000 f962 	bl	8003c4a <TIM_ITRx_SetConfig>
      break;
 8003986:	e029      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	6859      	ldr	r1, [r3, #4]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	461a      	mov	r2, r3
 8003996:	f000 f928 	bl	8003bea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2160      	movs	r1, #96	; 0x60
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 f952 	bl	8003c4a <TIM_ITRx_SetConfig>
      break;
 80039a6:	e019      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6859      	ldr	r1, [r3, #4]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	461a      	mov	r2, r3
 80039b6:	f000 f8e9 	bl	8003b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2140      	movs	r1, #64	; 0x40
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 f942 	bl	8003c4a <TIM_ITRx_SetConfig>
      break;
 80039c6:	e009      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4619      	mov	r1, r3
 80039d2:	4610      	mov	r0, r2
 80039d4:	f000 f939 	bl	8003c4a <TIM_ITRx_SetConfig>
        break;
 80039d8:	e000      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80039da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	fffeff88 	.word	0xfffeff88

080039fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a40      	ldr	r2, [pc, #256]	; (8003b60 <TIM_Base_SetConfig+0x114>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d013      	beq.n	8003a8c <TIM_Base_SetConfig+0x40>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6a:	d00f      	beq.n	8003a8c <TIM_Base_SetConfig+0x40>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a3d      	ldr	r2, [pc, #244]	; (8003b64 <TIM_Base_SetConfig+0x118>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00b      	beq.n	8003a8c <TIM_Base_SetConfig+0x40>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a3c      	ldr	r2, [pc, #240]	; (8003b68 <TIM_Base_SetConfig+0x11c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d007      	beq.n	8003a8c <TIM_Base_SetConfig+0x40>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a3b      	ldr	r2, [pc, #236]	; (8003b6c <TIM_Base_SetConfig+0x120>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d003      	beq.n	8003a8c <TIM_Base_SetConfig+0x40>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a3a      	ldr	r2, [pc, #232]	; (8003b70 <TIM_Base_SetConfig+0x124>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d108      	bne.n	8003a9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a2f      	ldr	r2, [pc, #188]	; (8003b60 <TIM_Base_SetConfig+0x114>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d02b      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aac:	d027      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a2c      	ldr	r2, [pc, #176]	; (8003b64 <TIM_Base_SetConfig+0x118>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d023      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a2b      	ldr	r2, [pc, #172]	; (8003b68 <TIM_Base_SetConfig+0x11c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d01f      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a2a      	ldr	r2, [pc, #168]	; (8003b6c <TIM_Base_SetConfig+0x120>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d01b      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a29      	ldr	r2, [pc, #164]	; (8003b70 <TIM_Base_SetConfig+0x124>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d017      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a28      	ldr	r2, [pc, #160]	; (8003b74 <TIM_Base_SetConfig+0x128>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a27      	ldr	r2, [pc, #156]	; (8003b78 <TIM_Base_SetConfig+0x12c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00f      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a26      	ldr	r2, [pc, #152]	; (8003b7c <TIM_Base_SetConfig+0x130>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a25      	ldr	r2, [pc, #148]	; (8003b80 <TIM_Base_SetConfig+0x134>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a24      	ldr	r2, [pc, #144]	; (8003b84 <TIM_Base_SetConfig+0x138>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a23      	ldr	r2, [pc, #140]	; (8003b88 <TIM_Base_SetConfig+0x13c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d108      	bne.n	8003b10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <TIM_Base_SetConfig+0x114>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <TIM_Base_SetConfig+0xf8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a0c      	ldr	r2, [pc, #48]	; (8003b70 <TIM_Base_SetConfig+0x124>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d103      	bne.n	8003b4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	615a      	str	r2, [r3, #20]
}
 8003b52:	bf00      	nop
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40010000 	.word	0x40010000
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40000800 	.word	0x40000800
 8003b6c:	40000c00 	.word	0x40000c00
 8003b70:	40010400 	.word	0x40010400
 8003b74:	40014000 	.word	0x40014000
 8003b78:	40014400 	.word	0x40014400
 8003b7c:	40014800 	.word	0x40014800
 8003b80:	40001800 	.word	0x40001800
 8003b84:	40001c00 	.word	0x40001c00
 8003b88:	40002000 	.word	0x40002000

08003b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f023 0201 	bic.w	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f023 030a 	bic.w	r3, r3, #10
 8003bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b087      	sub	sp, #28
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f023 0210 	bic.w	r2, r3, #16
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	031b      	lsls	r3, r3, #12
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f043 0307 	orr.w	r3, r3, #7
 8003c6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	609a      	str	r2, [r3, #8]
}
 8003c74:	bf00      	nop
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	021a      	lsls	r2, r3, #8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	609a      	str	r2, [r3, #8]
}
 8003cb4:	bf00      	nop
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e06d      	b.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a30      	ldr	r2, [pc, #192]	; (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a2f      	ldr	r2, [pc, #188]	; (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d108      	bne.n	8003d1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a20      	ldr	r2, [pc, #128]	; (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d022      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4a:	d01d      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d018      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1c      	ldr	r2, [pc, #112]	; (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d013      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1a      	ldr	r2, [pc, #104]	; (8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00e      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a15      	ldr	r2, [pc, #84]	; (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d009      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a16      	ldr	r2, [pc, #88]	; (8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d004      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a15      	ldr	r2, [pc, #84]	; (8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d10c      	bne.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	40010000 	.word	0x40010000
 8003dc4:	40010400 	.word	0x40010400
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40000c00 	.word	0x40000c00
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40001800 	.word	0x40001800

08003ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e040      	b.n	8003eac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fc ff92 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2224      	movs	r2, #36	; 0x24
 8003e44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fb0a 	bl	8004470 <UART_SetConfig>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e022      	b.n	8003eac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fd5e 	bl	8004930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fde5 	bl	8004a74 <UART_CheckIdleState>
 8003eaa:	4603      	mov	r3, r0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08a      	sub	sp, #40	; 0x28
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	f040 8081 	bne.w	8003fd0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_UART_Transmit+0x26>
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e079      	b.n	8003fd2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_UART_Transmit+0x38>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e072      	b.n	8003fd2 <HAL_UART_Transmit+0x11e>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2221      	movs	r2, #33	; 0x21
 8003f00:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f02:	f7fd f8d1 	bl	80010a8 <HAL_GetTick>
 8003f06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	88fa      	ldrh	r2, [r7, #6]
 8003f0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	88fa      	ldrh	r2, [r7, #6]
 8003f14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f20:	d108      	bne.n	8003f34 <HAL_UART_Transmit+0x80>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d104      	bne.n	8003f34 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	e003      	b.n	8003f3c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f44:	e02c      	b.n	8003fa0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2180      	movs	r1, #128	; 0x80
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 fdc2 	bl	8004ada <UART_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e038      	b.n	8003fd2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10b      	bne.n	8003f7e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	3302      	adds	r3, #2
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	e007      	b.n	8003f8e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	781a      	ldrb	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1cc      	bne.n	8003f46 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2140      	movs	r1, #64	; 0x40
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 fd8f 	bl	8004ada <UART_WaitOnFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e005      	b.n	8003fd2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e000      	b.n	8003fd2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
  }
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3720      	adds	r7, #32
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d12c      	bne.n	800404a <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <HAL_UART_Receive_IT+0x22>
 8003ff6:	88fb      	ldrh	r3, [r7, #6]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e025      	b.n	800404c <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_UART_Receive_IT+0x34>
 800400a:	2302      	movs	r3, #2
 800400c:	e01e      	b.n	800404c <HAL_UART_Receive_IT+0x72>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d007      	beq.n	800403a <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004038:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	461a      	mov	r2, r3
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fdc7 	bl	8004bd4 <UART_Start_Receive_IT>
 8004046:	4603      	mov	r3, r0
 8004048:	e000      	b.n	800404c <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 800404a:	2302      	movs	r3, #2
  }
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	f640 030f 	movw	r3, #2063	; 0x80f
 800407a:	4013      	ands	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d113      	bne.n	80040ac <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00e      	beq.n	80040ac <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b00      	cmp	r3, #0
 8004096:	d009      	beq.n	80040ac <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 81ba 	beq.w	8004416 <HAL_UART_IRQHandler+0x3c2>
      {
        huart->RxISR(huart);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
      }
      return;
 80040aa:	e1b4      	b.n	8004416 <HAL_UART_IRQHandler+0x3c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 80e3 	beq.w	800427a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d105      	bne.n	80040ca <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4ba5      	ldr	r3, [pc, #660]	; (8004358 <HAL_UART_IRQHandler+0x304>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80d8 	beq.w	800427a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <HAL_UART_IRQHandler+0xa2>
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2201      	movs	r2, #1
 80040e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ec:	f043 0201 	orr.w	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d010      	beq.n	8004122 <HAL_UART_IRQHandler+0xce>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00b      	beq.n	8004122 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2202      	movs	r2, #2
 8004110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004118:	f043 0204 	orr.w	r2, r3, #4
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d010      	beq.n	800414e <HAL_UART_IRQHandler+0xfa>
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2204      	movs	r2, #4
 800413c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004144:	f043 0202 	orr.w	r2, r3, #2
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d015      	beq.n	8004184 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d104      	bne.n	800416c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00b      	beq.n	8004184 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2208      	movs	r2, #8
 8004172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417a:	f043 0208 	orr.w	r2, r3, #8
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800418a:	2b00      	cmp	r3, #0
 800418c:	d011      	beq.n	80041b2 <HAL_UART_IRQHandler+0x15e>
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00c      	beq.n	80041b2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041a8:	f043 0220 	orr.w	r2, r3, #32
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 812e 	beq.w	800441a <HAL_UART_IRQHandler+0x3c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00c      	beq.n	80041e2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d007      	beq.n	80041e2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	2b40      	cmp	r3, #64	; 0x40
 80041f6:	d004      	beq.n	8004202 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d031      	beq.n	8004266 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fd6e 	bl	8004ce4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004212:	2b40      	cmp	r3, #64	; 0x40
 8004214:	d123      	bne.n	800425e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004224:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	2b00      	cmp	r3, #0
 800422c:	d013      	beq.n	8004256 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	4a4a      	ldr	r2, [pc, #296]	; (800435c <HAL_UART_IRQHandler+0x308>)
 8004234:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	4618      	mov	r0, r3
 800423c:	f7fd f8e3 	bl	8001406 <HAL_DMA_Abort_IT>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d017      	beq.n	8004276 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004250:	4610      	mov	r0, r2
 8004252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004254:	e00f      	b.n	8004276 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f8f4 	bl	8004444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425c:	e00b      	b.n	8004276 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f8f0 	bl	8004444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004264:	e007      	b.n	8004276 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f8ec 	bl	8004444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004274:	e0d1      	b.n	800441a <HAL_UART_IRQHandler+0x3c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004276:	bf00      	nop
    return;
 8004278:	e0cf      	b.n	800441a <HAL_UART_IRQHandler+0x3c6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427e:	2b01      	cmp	r3, #1
 8004280:	f040 80a7 	bne.w	80043d2 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 80a1 	beq.w	80043d2 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 809b 	beq.w	80043d2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2210      	movs	r2, #16
 80042a2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d156      	bne.n	8004360 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80042bc:	893b      	ldrh	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 80ad 	beq.w	800441e <HAL_UART_IRQHandler+0x3ca>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042ca:	893a      	ldrh	r2, [r7, #8]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	f080 80a6 	bcs.w	800441e <HAL_UART_IRQHandler+0x3ca>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	893a      	ldrh	r2, [r7, #8]
 80042d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e4:	d02a      	beq.n	800433c <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0201 	bic.w	r2, r2, #1
 8004304:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004314:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0210 	bic.w	r2, r2, #16
 8004330:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	4618      	mov	r0, r3
 8004338:	f7fc fff5 	bl	8001326 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004348:	b29b      	uxth	r3, r3
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	b29b      	uxth	r3, r3
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f881 	bl	8004458 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004356:	e062      	b.n	800441e <HAL_UART_IRQHandler+0x3ca>
 8004358:	04000120 	.word	0x04000120
 800435c:	08004d43 	.word	0x08004d43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800436c:	b29b      	uxth	r3, r3
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d051      	beq.n	8004422 <HAL_UART_IRQHandler+0x3ce>
          && (nb_rx_data > 0U))
 800437e:	897b      	ldrh	r3, [r7, #10]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d04e      	beq.n	8004422 <HAL_UART_IRQHandler+0x3ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004392:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0201 	bic.w	r2, r2, #1
 80043a2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0210 	bic.w	r2, r2, #16
 80043c4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043c6:	897b      	ldrh	r3, [r7, #10]
 80043c8:	4619      	mov	r1, r3
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f844 	bl	8004458 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043d0:	e027      	b.n	8004422 <HAL_UART_IRQHandler+0x3ce>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d008      	beq.n	80043f8 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01b      	beq.n	8004426 <HAL_UART_IRQHandler+0x3d2>
    {
      huart->TxISR(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	4798      	blx	r3
    }
    return;
 80043f6:	e016      	b.n	8004426 <HAL_UART_IRQHandler+0x3d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d012      	beq.n	8004428 <HAL_UART_IRQHandler+0x3d4>
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00d      	beq.n	8004428 <HAL_UART_IRQHandler+0x3d4>
  {
    UART_EndTransmit_IT(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fcae 	bl	8004d6e <UART_EndTransmit_IT>
    return;
 8004412:	bf00      	nop
 8004414:	e008      	b.n	8004428 <HAL_UART_IRQHandler+0x3d4>
      return;
 8004416:	bf00      	nop
 8004418:	e006      	b.n	8004428 <HAL_UART_IRQHandler+0x3d4>
    return;
 800441a:	bf00      	nop
 800441c:	e004      	b.n	8004428 <HAL_UART_IRQHandler+0x3d4>
      return;
 800441e:	bf00      	nop
 8004420:	e002      	b.n	8004428 <HAL_UART_IRQHandler+0x3d4>
      return;
 8004422:	bf00      	nop
 8004424:	e000      	b.n	8004428 <HAL_UART_IRQHandler+0x3d4>
    return;
 8004426:	bf00      	nop
  }

}
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop

08004430 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	4bb1      	ldr	r3, [pc, #708]	; (8004760 <UART_SetConfig+0x2f0>)
 800449c:	4013      	ands	r3, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	6979      	ldr	r1, [r7, #20]
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a9f      	ldr	r2, [pc, #636]	; (8004764 <UART_SetConfig+0x2f4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d121      	bne.n	8004530 <UART_SetConfig+0xc0>
 80044ec:	4b9e      	ldr	r3, [pc, #632]	; (8004768 <UART_SetConfig+0x2f8>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d816      	bhi.n	8004528 <UART_SetConfig+0xb8>
 80044fa:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <UART_SetConfig+0x90>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004511 	.word	0x08004511
 8004504:	0800451d 	.word	0x0800451d
 8004508:	08004517 	.word	0x08004517
 800450c:	08004523 	.word	0x08004523
 8004510:	2301      	movs	r3, #1
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	e151      	b.n	80047ba <UART_SetConfig+0x34a>
 8004516:	2302      	movs	r3, #2
 8004518:	77fb      	strb	r3, [r7, #31]
 800451a:	e14e      	b.n	80047ba <UART_SetConfig+0x34a>
 800451c:	2304      	movs	r3, #4
 800451e:	77fb      	strb	r3, [r7, #31]
 8004520:	e14b      	b.n	80047ba <UART_SetConfig+0x34a>
 8004522:	2308      	movs	r3, #8
 8004524:	77fb      	strb	r3, [r7, #31]
 8004526:	e148      	b.n	80047ba <UART_SetConfig+0x34a>
 8004528:	2310      	movs	r3, #16
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	bf00      	nop
 800452e:	e144      	b.n	80047ba <UART_SetConfig+0x34a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a8d      	ldr	r2, [pc, #564]	; (800476c <UART_SetConfig+0x2fc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d134      	bne.n	80045a4 <UART_SetConfig+0x134>
 800453a:	4b8b      	ldr	r3, [pc, #556]	; (8004768 <UART_SetConfig+0x2f8>)
 800453c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004540:	f003 030c 	and.w	r3, r3, #12
 8004544:	2b0c      	cmp	r3, #12
 8004546:	d829      	bhi.n	800459c <UART_SetConfig+0x12c>
 8004548:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <UART_SetConfig+0xe0>)
 800454a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454e:	bf00      	nop
 8004550:	08004585 	.word	0x08004585
 8004554:	0800459d 	.word	0x0800459d
 8004558:	0800459d 	.word	0x0800459d
 800455c:	0800459d 	.word	0x0800459d
 8004560:	08004591 	.word	0x08004591
 8004564:	0800459d 	.word	0x0800459d
 8004568:	0800459d 	.word	0x0800459d
 800456c:	0800459d 	.word	0x0800459d
 8004570:	0800458b 	.word	0x0800458b
 8004574:	0800459d 	.word	0x0800459d
 8004578:	0800459d 	.word	0x0800459d
 800457c:	0800459d 	.word	0x0800459d
 8004580:	08004597 	.word	0x08004597
 8004584:	2300      	movs	r3, #0
 8004586:	77fb      	strb	r3, [r7, #31]
 8004588:	e117      	b.n	80047ba <UART_SetConfig+0x34a>
 800458a:	2302      	movs	r3, #2
 800458c:	77fb      	strb	r3, [r7, #31]
 800458e:	e114      	b.n	80047ba <UART_SetConfig+0x34a>
 8004590:	2304      	movs	r3, #4
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e111      	b.n	80047ba <UART_SetConfig+0x34a>
 8004596:	2308      	movs	r3, #8
 8004598:	77fb      	strb	r3, [r7, #31]
 800459a:	e10e      	b.n	80047ba <UART_SetConfig+0x34a>
 800459c:	2310      	movs	r3, #16
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	bf00      	nop
 80045a2:	e10a      	b.n	80047ba <UART_SetConfig+0x34a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a71      	ldr	r2, [pc, #452]	; (8004770 <UART_SetConfig+0x300>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d120      	bne.n	80045f0 <UART_SetConfig+0x180>
 80045ae:	4b6e      	ldr	r3, [pc, #440]	; (8004768 <UART_SetConfig+0x2f8>)
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045b8:	2b10      	cmp	r3, #16
 80045ba:	d00f      	beq.n	80045dc <UART_SetConfig+0x16c>
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d802      	bhi.n	80045c6 <UART_SetConfig+0x156>
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <UART_SetConfig+0x160>
 80045c4:	e010      	b.n	80045e8 <UART_SetConfig+0x178>
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d005      	beq.n	80045d6 <UART_SetConfig+0x166>
 80045ca:	2b30      	cmp	r3, #48	; 0x30
 80045cc:	d009      	beq.n	80045e2 <UART_SetConfig+0x172>
 80045ce:	e00b      	b.n	80045e8 <UART_SetConfig+0x178>
 80045d0:	2300      	movs	r3, #0
 80045d2:	77fb      	strb	r3, [r7, #31]
 80045d4:	e0f1      	b.n	80047ba <UART_SetConfig+0x34a>
 80045d6:	2302      	movs	r3, #2
 80045d8:	77fb      	strb	r3, [r7, #31]
 80045da:	e0ee      	b.n	80047ba <UART_SetConfig+0x34a>
 80045dc:	2304      	movs	r3, #4
 80045de:	77fb      	strb	r3, [r7, #31]
 80045e0:	e0eb      	b.n	80047ba <UART_SetConfig+0x34a>
 80045e2:	2308      	movs	r3, #8
 80045e4:	77fb      	strb	r3, [r7, #31]
 80045e6:	e0e8      	b.n	80047ba <UART_SetConfig+0x34a>
 80045e8:	2310      	movs	r3, #16
 80045ea:	77fb      	strb	r3, [r7, #31]
 80045ec:	bf00      	nop
 80045ee:	e0e4      	b.n	80047ba <UART_SetConfig+0x34a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a5f      	ldr	r2, [pc, #380]	; (8004774 <UART_SetConfig+0x304>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d120      	bne.n	800463c <UART_SetConfig+0x1cc>
 80045fa:	4b5b      	ldr	r3, [pc, #364]	; (8004768 <UART_SetConfig+0x2f8>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004600:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d00f      	beq.n	8004628 <UART_SetConfig+0x1b8>
 8004608:	2b40      	cmp	r3, #64	; 0x40
 800460a:	d802      	bhi.n	8004612 <UART_SetConfig+0x1a2>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <UART_SetConfig+0x1ac>
 8004610:	e010      	b.n	8004634 <UART_SetConfig+0x1c4>
 8004612:	2b80      	cmp	r3, #128	; 0x80
 8004614:	d005      	beq.n	8004622 <UART_SetConfig+0x1b2>
 8004616:	2bc0      	cmp	r3, #192	; 0xc0
 8004618:	d009      	beq.n	800462e <UART_SetConfig+0x1be>
 800461a:	e00b      	b.n	8004634 <UART_SetConfig+0x1c4>
 800461c:	2300      	movs	r3, #0
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e0cb      	b.n	80047ba <UART_SetConfig+0x34a>
 8004622:	2302      	movs	r3, #2
 8004624:	77fb      	strb	r3, [r7, #31]
 8004626:	e0c8      	b.n	80047ba <UART_SetConfig+0x34a>
 8004628:	2304      	movs	r3, #4
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e0c5      	b.n	80047ba <UART_SetConfig+0x34a>
 800462e:	2308      	movs	r3, #8
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e0c2      	b.n	80047ba <UART_SetConfig+0x34a>
 8004634:	2310      	movs	r3, #16
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	bf00      	nop
 800463a:	e0be      	b.n	80047ba <UART_SetConfig+0x34a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a4d      	ldr	r2, [pc, #308]	; (8004778 <UART_SetConfig+0x308>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d124      	bne.n	8004690 <UART_SetConfig+0x220>
 8004646:	4b48      	ldr	r3, [pc, #288]	; (8004768 <UART_SetConfig+0x2f8>)
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004654:	d012      	beq.n	800467c <UART_SetConfig+0x20c>
 8004656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800465a:	d802      	bhi.n	8004662 <UART_SetConfig+0x1f2>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <UART_SetConfig+0x200>
 8004660:	e012      	b.n	8004688 <UART_SetConfig+0x218>
 8004662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004666:	d006      	beq.n	8004676 <UART_SetConfig+0x206>
 8004668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800466c:	d009      	beq.n	8004682 <UART_SetConfig+0x212>
 800466e:	e00b      	b.n	8004688 <UART_SetConfig+0x218>
 8004670:	2300      	movs	r3, #0
 8004672:	77fb      	strb	r3, [r7, #31]
 8004674:	e0a1      	b.n	80047ba <UART_SetConfig+0x34a>
 8004676:	2302      	movs	r3, #2
 8004678:	77fb      	strb	r3, [r7, #31]
 800467a:	e09e      	b.n	80047ba <UART_SetConfig+0x34a>
 800467c:	2304      	movs	r3, #4
 800467e:	77fb      	strb	r3, [r7, #31]
 8004680:	e09b      	b.n	80047ba <UART_SetConfig+0x34a>
 8004682:	2308      	movs	r3, #8
 8004684:	77fb      	strb	r3, [r7, #31]
 8004686:	e098      	b.n	80047ba <UART_SetConfig+0x34a>
 8004688:	2310      	movs	r3, #16
 800468a:	77fb      	strb	r3, [r7, #31]
 800468c:	bf00      	nop
 800468e:	e094      	b.n	80047ba <UART_SetConfig+0x34a>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a39      	ldr	r2, [pc, #228]	; (800477c <UART_SetConfig+0x30c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d124      	bne.n	80046e4 <UART_SetConfig+0x274>
 800469a:	4b33      	ldr	r3, [pc, #204]	; (8004768 <UART_SetConfig+0x2f8>)
 800469c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a8:	d012      	beq.n	80046d0 <UART_SetConfig+0x260>
 80046aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ae:	d802      	bhi.n	80046b6 <UART_SetConfig+0x246>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <UART_SetConfig+0x254>
 80046b4:	e012      	b.n	80046dc <UART_SetConfig+0x26c>
 80046b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ba:	d006      	beq.n	80046ca <UART_SetConfig+0x25a>
 80046bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046c0:	d009      	beq.n	80046d6 <UART_SetConfig+0x266>
 80046c2:	e00b      	b.n	80046dc <UART_SetConfig+0x26c>
 80046c4:	2301      	movs	r3, #1
 80046c6:	77fb      	strb	r3, [r7, #31]
 80046c8:	e077      	b.n	80047ba <UART_SetConfig+0x34a>
 80046ca:	2302      	movs	r3, #2
 80046cc:	77fb      	strb	r3, [r7, #31]
 80046ce:	e074      	b.n	80047ba <UART_SetConfig+0x34a>
 80046d0:	2304      	movs	r3, #4
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e071      	b.n	80047ba <UART_SetConfig+0x34a>
 80046d6:	2308      	movs	r3, #8
 80046d8:	77fb      	strb	r3, [r7, #31]
 80046da:	e06e      	b.n	80047ba <UART_SetConfig+0x34a>
 80046dc:	2310      	movs	r3, #16
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	bf00      	nop
 80046e2:	e06a      	b.n	80047ba <UART_SetConfig+0x34a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a25      	ldr	r2, [pc, #148]	; (8004780 <UART_SetConfig+0x310>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d124      	bne.n	8004738 <UART_SetConfig+0x2c8>
 80046ee:	4b1e      	ldr	r3, [pc, #120]	; (8004768 <UART_SetConfig+0x2f8>)
 80046f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80046f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fc:	d012      	beq.n	8004724 <UART_SetConfig+0x2b4>
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d802      	bhi.n	800470a <UART_SetConfig+0x29a>
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <UART_SetConfig+0x2a8>
 8004708:	e012      	b.n	8004730 <UART_SetConfig+0x2c0>
 800470a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470e:	d006      	beq.n	800471e <UART_SetConfig+0x2ae>
 8004710:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004714:	d009      	beq.n	800472a <UART_SetConfig+0x2ba>
 8004716:	e00b      	b.n	8004730 <UART_SetConfig+0x2c0>
 8004718:	2300      	movs	r3, #0
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e04d      	b.n	80047ba <UART_SetConfig+0x34a>
 800471e:	2302      	movs	r3, #2
 8004720:	77fb      	strb	r3, [r7, #31]
 8004722:	e04a      	b.n	80047ba <UART_SetConfig+0x34a>
 8004724:	2304      	movs	r3, #4
 8004726:	77fb      	strb	r3, [r7, #31]
 8004728:	e047      	b.n	80047ba <UART_SetConfig+0x34a>
 800472a:	2308      	movs	r3, #8
 800472c:	77fb      	strb	r3, [r7, #31]
 800472e:	e044      	b.n	80047ba <UART_SetConfig+0x34a>
 8004730:	2310      	movs	r3, #16
 8004732:	77fb      	strb	r3, [r7, #31]
 8004734:	bf00      	nop
 8004736:	e040      	b.n	80047ba <UART_SetConfig+0x34a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a11      	ldr	r2, [pc, #68]	; (8004784 <UART_SetConfig+0x314>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d139      	bne.n	80047b6 <UART_SetConfig+0x346>
 8004742:	4b09      	ldr	r3, [pc, #36]	; (8004768 <UART_SetConfig+0x2f8>)
 8004744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004748:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800474c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004750:	d027      	beq.n	80047a2 <UART_SetConfig+0x332>
 8004752:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004756:	d817      	bhi.n	8004788 <UART_SetConfig+0x318>
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01c      	beq.n	8004796 <UART_SetConfig+0x326>
 800475c:	e027      	b.n	80047ae <UART_SetConfig+0x33e>
 800475e:	bf00      	nop
 8004760:	efff69f3 	.word	0xefff69f3
 8004764:	40011000 	.word	0x40011000
 8004768:	40023800 	.word	0x40023800
 800476c:	40004400 	.word	0x40004400
 8004770:	40004800 	.word	0x40004800
 8004774:	40004c00 	.word	0x40004c00
 8004778:	40005000 	.word	0x40005000
 800477c:	40011400 	.word	0x40011400
 8004780:	40007800 	.word	0x40007800
 8004784:	40007c00 	.word	0x40007c00
 8004788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800478c:	d006      	beq.n	800479c <UART_SetConfig+0x32c>
 800478e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004792:	d009      	beq.n	80047a8 <UART_SetConfig+0x338>
 8004794:	e00b      	b.n	80047ae <UART_SetConfig+0x33e>
 8004796:	2300      	movs	r3, #0
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e00e      	b.n	80047ba <UART_SetConfig+0x34a>
 800479c:	2302      	movs	r3, #2
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e00b      	b.n	80047ba <UART_SetConfig+0x34a>
 80047a2:	2304      	movs	r3, #4
 80047a4:	77fb      	strb	r3, [r7, #31]
 80047a6:	e008      	b.n	80047ba <UART_SetConfig+0x34a>
 80047a8:	2308      	movs	r3, #8
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e005      	b.n	80047ba <UART_SetConfig+0x34a>
 80047ae:	2310      	movs	r3, #16
 80047b0:	77fb      	strb	r3, [r7, #31]
 80047b2:	bf00      	nop
 80047b4:	e001      	b.n	80047ba <UART_SetConfig+0x34a>
 80047b6:	2310      	movs	r3, #16
 80047b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c2:	d15b      	bne.n	800487c <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 80047c4:	7ffb      	ldrb	r3, [r7, #31]
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d827      	bhi.n	800481a <UART_SetConfig+0x3aa>
 80047ca:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0x360>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	080047fd 	.word	0x080047fd
 80047d8:	08004805 	.word	0x08004805
 80047dc:	0800481b 	.word	0x0800481b
 80047e0:	0800480b 	.word	0x0800480b
 80047e4:	0800481b 	.word	0x0800481b
 80047e8:	0800481b 	.word	0x0800481b
 80047ec:	0800481b 	.word	0x0800481b
 80047f0:	08004813 	.word	0x08004813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f4:	f7fe fa40 	bl	8002c78 <HAL_RCC_GetPCLK1Freq>
 80047f8:	61b8      	str	r0, [r7, #24]
        break;
 80047fa:	e013      	b.n	8004824 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047fc:	f7fe fa50 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
 8004800:	61b8      	str	r0, [r7, #24]
        break;
 8004802:	e00f      	b.n	8004824 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004804:	4b49      	ldr	r3, [pc, #292]	; (800492c <UART_SetConfig+0x4bc>)
 8004806:	61bb      	str	r3, [r7, #24]
        break;
 8004808:	e00c      	b.n	8004824 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480a:	f7fe f951 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 800480e:	61b8      	str	r0, [r7, #24]
        break;
 8004810:	e008      	b.n	8004824 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004816:	61bb      	str	r3, [r7, #24]
        break;
 8004818:	e004      	b.n	8004824 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	77bb      	strb	r3, [r7, #30]
        break;
 8004822:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d074      	beq.n	8004914 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	005a      	lsls	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	441a      	add	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	b29b      	uxth	r3, r3
 8004840:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b0f      	cmp	r3, #15
 8004846:	d916      	bls.n	8004876 <UART_SetConfig+0x406>
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484e:	d212      	bcs.n	8004876 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f023 030f 	bic.w	r3, r3, #15
 8004858:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	085b      	lsrs	r3, r3, #1
 800485e:	b29b      	uxth	r3, r3
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	b29a      	uxth	r2, r3
 8004866:	89fb      	ldrh	r3, [r7, #14]
 8004868:	4313      	orrs	r3, r2
 800486a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	89fa      	ldrh	r2, [r7, #14]
 8004872:	60da      	str	r2, [r3, #12]
 8004874:	e04e      	b.n	8004914 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	77bb      	strb	r3, [r7, #30]
 800487a:	e04b      	b.n	8004914 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800487c:	7ffb      	ldrb	r3, [r7, #31]
 800487e:	2b08      	cmp	r3, #8
 8004880:	d827      	bhi.n	80048d2 <UART_SetConfig+0x462>
 8004882:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <UART_SetConfig+0x418>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	080048ad 	.word	0x080048ad
 800488c:	080048b5 	.word	0x080048b5
 8004890:	080048bd 	.word	0x080048bd
 8004894:	080048d3 	.word	0x080048d3
 8004898:	080048c3 	.word	0x080048c3
 800489c:	080048d3 	.word	0x080048d3
 80048a0:	080048d3 	.word	0x080048d3
 80048a4:	080048d3 	.word	0x080048d3
 80048a8:	080048cb 	.word	0x080048cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ac:	f7fe f9e4 	bl	8002c78 <HAL_RCC_GetPCLK1Freq>
 80048b0:	61b8      	str	r0, [r7, #24]
        break;
 80048b2:	e013      	b.n	80048dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b4:	f7fe f9f4 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
 80048b8:	61b8      	str	r0, [r7, #24]
        break;
 80048ba:	e00f      	b.n	80048dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048bc:	4b1b      	ldr	r3, [pc, #108]	; (800492c <UART_SetConfig+0x4bc>)
 80048be:	61bb      	str	r3, [r7, #24]
        break;
 80048c0:	e00c      	b.n	80048dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c2:	f7fe f8f5 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 80048c6:	61b8      	str	r0, [r7, #24]
        break;
 80048c8:	e008      	b.n	80048dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ce:	61bb      	str	r3, [r7, #24]
        break;
 80048d0:	e004      	b.n	80048dc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	77bb      	strb	r3, [r7, #30]
        break;
 80048da:	bf00      	nop
    }

    if (pclk != 0U)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d018      	beq.n	8004914 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	085a      	lsrs	r2, r3, #1
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	441a      	add	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	2b0f      	cmp	r3, #15
 80048fc:	d908      	bls.n	8004910 <UART_SetConfig+0x4a0>
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004904:	d204      	bcs.n	8004910 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	60da      	str	r2, [r3, #12]
 800490e:	e001      	b.n	8004914 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004920:	7fbb      	ldrb	r3, [r7, #30]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3720      	adds	r7, #32
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	00f42400 	.word	0x00f42400

08004930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01a      	beq.n	8004a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a2e:	d10a      	bne.n	8004a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]
  }
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a84:	f7fc fb10 	bl	80010a8 <HAL_GetTick>
 8004a88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d10e      	bne.n	8004ab6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f817 	bl	8004ada <UART_WaitOnFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e00d      	b.n	8004ad2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aea:	e05e      	b.n	8004baa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d05a      	beq.n	8004baa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af4:	f7fc fad8 	bl	80010a8 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d302      	bcc.n	8004b0a <UART_WaitOnFlagUntilTimeout+0x30>
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d11b      	bne.n	8004b42 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b18:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e043      	b.n	8004bca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d02c      	beq.n	8004baa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5e:	d124      	bne.n	8004baa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b78:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0201 	bic.w	r2, r2, #1
 8004b88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e00f      	b.n	8004bca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	bf0c      	ite	eq
 8004bba:	2301      	moveq	r3, #1
 8004bbc:	2300      	movne	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d091      	beq.n	8004aec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	4613      	mov	r3, r2
 8004be0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	88fa      	ldrh	r2, [r7, #6]
 8004bec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c06:	d10e      	bne.n	8004c26 <UART_Start_Receive_IT+0x52>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d105      	bne.n	8004c1c <UART_Start_Receive_IT+0x48>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c1a:	e02d      	b.n	8004c78 <UART_Start_Receive_IT+0xa4>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	22ff      	movs	r2, #255	; 0xff
 8004c20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c24:	e028      	b.n	8004c78 <UART_Start_Receive_IT+0xa4>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10d      	bne.n	8004c4a <UART_Start_Receive_IT+0x76>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d104      	bne.n	8004c40 <UART_Start_Receive_IT+0x6c>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	22ff      	movs	r2, #255	; 0xff
 8004c3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c3e:	e01b      	b.n	8004c78 <UART_Start_Receive_IT+0xa4>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	227f      	movs	r2, #127	; 0x7f
 8004c44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c48:	e016      	b.n	8004c78 <UART_Start_Receive_IT+0xa4>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c52:	d10d      	bne.n	8004c70 <UART_Start_Receive_IT+0x9c>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <UART_Start_Receive_IT+0x92>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	227f      	movs	r2, #127	; 0x7f
 8004c60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c64:	e008      	b.n	8004c78 <UART_Start_Receive_IT+0xa4>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	223f      	movs	r2, #63	; 0x3f
 8004c6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c6e:	e003      	b.n	8004c78 <UART_Start_Receive_IT+0xa4>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2222      	movs	r2, #34	; 0x22
 8004c84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0201 	orr.w	r2, r2, #1
 8004c94:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9e:	d107      	bne.n	8004cb0 <UART_Start_Receive_IT+0xdc>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d103      	bne.n	8004cb0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4a0c      	ldr	r2, [pc, #48]	; (8004cdc <UART_Start_Receive_IT+0x108>)
 8004cac:	665a      	str	r2, [r3, #100]	; 0x64
 8004cae:	e002      	b.n	8004cb6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4a0b      	ldr	r2, [pc, #44]	; (8004ce0 <UART_Start_Receive_IT+0x10c>)
 8004cb4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004ccc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	08004e75 	.word	0x08004e75
 8004ce0:	08004da1 	.word	0x08004da1

08004ce4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cfa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d107      	bne.n	8004d24 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0210 	bic.w	r2, r2, #16
 8004d22:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2220      	movs	r2, #32
 8004d28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff fb6f 	bl	8004444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d84:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff fb4c 	bl	8004430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d98:	bf00      	nop
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004dae:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004db4:	2b22      	cmp	r3, #34	; 0x22
 8004db6:	d151      	bne.n	8004e5c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004dc0:	89bb      	ldrh	r3, [r7, #12]
 8004dc2:	b2d9      	uxtb	r1, r3
 8004dc4:	89fb      	ldrh	r3, [r7, #14]
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dcc:	400a      	ands	r2, r1
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d138      	bne.n	8004e6c <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e08:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0201 	bic.w	r2, r2, #1
 8004e18:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d10f      	bne.n	8004e4e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0210 	bic.w	r2, r2, #16
 8004e3c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e44:	4619      	mov	r1, r3
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff fb06 	bl	8004458 <HAL_UARTEx_RxEventCallback>
 8004e4c:	e002      	b.n	8004e54 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fb fe42 	bl	8000ad8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e5a:	e007      	b.n	8004e6c <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0208 	orr.w	r2, r2, #8
 8004e6a:	619a      	str	r2, [r3, #24]
}
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e82:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e88:	2b22      	cmp	r3, #34	; 0x22
 8004e8a:	d151      	bne.n	8004f30 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e98:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e9a:	89ba      	ldrh	r2, [r7, #12]
 8004e9c:	89fb      	ldrh	r3, [r7, #14]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	1c9a      	adds	r2, r3, #2
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d138      	bne.n	8004f40 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004edc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0201 	bic.w	r2, r2, #1
 8004eec:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d10f      	bne.n	8004f22 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0210 	bic.w	r2, r2, #16
 8004f10:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fa9c 	bl	8004458 <HAL_UARTEx_RxEventCallback>
 8004f20:	e002      	b.n	8004f28 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fb fdd8 	bl	8000ad8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f2e:	e007      	b.n	8004f40 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0208 	orr.w	r2, r2, #8
 8004f3e:	619a      	str	r2, [r3, #24]
}
 8004f40:	bf00      	nop
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f48:	b084      	sub	sp, #16
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	f107 001c 	add.w	r0, r7, #28
 8004f56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d120      	bne.n	8004fa2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	4b20      	ldr	r3, [pc, #128]	; (8004ff4 <USB_CoreInit+0xac>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d105      	bne.n	8004f96 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fa5a 	bl	8005450 <USB_CoreReset>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	e010      	b.n	8004fc4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fa4e 	bl	8005450 <USB_CoreReset>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d10b      	bne.n	8004fe2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f043 0206 	orr.w	r2, r3, #6
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f043 0220 	orr.w	r2, r3, #32
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fee:	b004      	add	sp, #16
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	ffbdffbf 	.word	0xffbdffbf

08004ff8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f023 0201 	bic.w	r2, r3, #1
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b082      	sub	sp, #8
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	460b      	mov	r3, r1
 8005024:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d106      	bne.n	8005046 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	60da      	str	r2, [r3, #12]
 8005044:	e00b      	b.n	800505e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005046:	78fb      	ldrb	r3, [r7, #3]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	60da      	str	r2, [r3, #12]
 8005058:	e001      	b.n	800505e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e003      	b.n	8005066 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800505e:	2032      	movs	r0, #50	; 0x32
 8005060:	f7fc f82e 	bl	80010c0 <HAL_Delay>

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005070:	b084      	sub	sp, #16
 8005072:	b580      	push	{r7, lr}
 8005074:	b086      	sub	sp, #24
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800507e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800508a:	2300      	movs	r3, #0
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	e009      	b.n	80050a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	3340      	adds	r3, #64	; 0x40
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	2200      	movs	r2, #0
 800509c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	3301      	adds	r3, #1
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b0e      	cmp	r3, #14
 80050a8:	d9f2      	bls.n	8005090 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d11c      	bne.n	80050ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050be:	f043 0302 	orr.w	r3, r3, #2
 80050c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	e005      	b.n	80050f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050fc:	461a      	mov	r2, r3
 80050fe:	2300      	movs	r3, #0
 8005100:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005108:	4619      	mov	r1, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005110:	461a      	mov	r2, r3
 8005112:	680b      	ldr	r3, [r1, #0]
 8005114:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005118:	2b01      	cmp	r3, #1
 800511a:	d10c      	bne.n	8005136 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005122:	2100      	movs	r1, #0
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f959 	bl	80053dc <USB_SetDevSpeed>
 800512a:	e018      	b.n	800515e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800512c:	2101      	movs	r1, #1
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f954 	bl	80053dc <USB_SetDevSpeed>
 8005134:	e013      	b.n	800515e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	2b03      	cmp	r3, #3
 800513a:	d10c      	bne.n	8005156 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800513c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d104      	bne.n	800514c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005142:	2100      	movs	r1, #0
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f949 	bl	80053dc <USB_SetDevSpeed>
 800514a:	e008      	b.n	800515e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800514c:	2101      	movs	r1, #1
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f944 	bl	80053dc <USB_SetDevSpeed>
 8005154:	e003      	b.n	800515e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005156:	2103      	movs	r1, #3
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f93f 	bl	80053dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800515e:	2110      	movs	r1, #16
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f8f3 	bl	800534c <USB_FlushTxFifo>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f911 	bl	8005398 <USB_FlushRxFifo>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005186:	461a      	mov	r2, r3
 8005188:	2300      	movs	r3, #0
 800518a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005192:	461a      	mov	r2, r3
 8005194:	2300      	movs	r3, #0
 8005196:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519e:	461a      	mov	r2, r3
 80051a0:	2300      	movs	r3, #0
 80051a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051a4:	2300      	movs	r3, #0
 80051a6:	613b      	str	r3, [r7, #16]
 80051a8:	e043      	b.n	8005232 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051c0:	d118      	bne.n	80051f4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d4:	461a      	mov	r2, r3
 80051d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	e013      	b.n	8005206 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ea:	461a      	mov	r2, r3
 80051ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	e008      	b.n	8005206 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005200:	461a      	mov	r2, r3
 8005202:	2300      	movs	r3, #0
 8005204:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005212:	461a      	mov	r2, r3
 8005214:	2300      	movs	r3, #0
 8005216:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005224:	461a      	mov	r2, r3
 8005226:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800522a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	3301      	adds	r3, #1
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	429a      	cmp	r2, r3
 8005238:	d3b7      	bcc.n	80051aa <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800523a:	2300      	movs	r3, #0
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	e043      	b.n	80052c8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005252:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005256:	d118      	bne.n	800528a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10a      	bne.n	8005274 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526a:	461a      	mov	r2, r3
 800526c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	e013      	b.n	800529c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	461a      	mov	r2, r3
 8005282:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	e008      	b.n	800529c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005296:	461a      	mov	r2, r3
 8005298:	2300      	movs	r3, #0
 800529a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a8:	461a      	mov	r2, r3
 80052aa:	2300      	movs	r3, #0
 80052ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	461a      	mov	r2, r3
 80052bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	3301      	adds	r3, #1
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d3b7      	bcc.n	8005240 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d105      	bne.n	8005304 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f043 0210 	orr.w	r2, r3, #16
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <USB_DevInit+0x2d4>)
 800530a:	4313      	orrs	r3, r2
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f043 0208 	orr.w	r2, r3, #8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005324:	2b01      	cmp	r3, #1
 8005326:	d105      	bne.n	8005334 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699a      	ldr	r2, [r3, #24]
 800532c:	4b06      	ldr	r3, [pc, #24]	; (8005348 <USB_DevInit+0x2d8>)
 800532e:	4313      	orrs	r3, r2
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005334:	7dfb      	ldrb	r3, [r7, #23]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005340:	b004      	add	sp, #16
 8005342:	4770      	bx	lr
 8005344:	803c3800 	.word	0x803c3800
 8005348:	40000004 	.word	0x40000004

0800534c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	019b      	lsls	r3, r3, #6
 800535e:	f043 0220 	orr.w	r2, r3, #32
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3301      	adds	r3, #1
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4a09      	ldr	r2, [pc, #36]	; (8005394 <USB_FlushTxFifo+0x48>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d901      	bls.n	8005378 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e006      	b.n	8005386 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b20      	cmp	r3, #32
 8005382:	d0f0      	beq.n	8005366 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	00030d40 	.word	0x00030d40

08005398 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2210      	movs	r2, #16
 80053a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3301      	adds	r3, #1
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4a09      	ldr	r2, [pc, #36]	; (80053d8 <USB_FlushRxFifo+0x40>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d901      	bls.n	80053bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e006      	b.n	80053ca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d0f0      	beq.n	80053aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	00030d40 	.word	0x00030d40

080053dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053fc:	4313      	orrs	r3, r2
 80053fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800540e:	b480      	push	{r7}
 8005410:	b085      	sub	sp, #20
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005428:	f023 0303 	bic.w	r3, r3, #3
 800542c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800543c:	f043 0302 	orr.w	r3, r3, #2
 8005440:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3301      	adds	r3, #1
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4a13      	ldr	r2, [pc, #76]	; (80054b4 <USB_CoreReset+0x64>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d901      	bls.n	800546e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e01b      	b.n	80054a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	daf2      	bge.n	800545c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f043 0201 	orr.w	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3301      	adds	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <USB_CoreReset+0x64>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d901      	bls.n	8005498 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e006      	b.n	80054a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d0f0      	beq.n	8005486 <USB_CoreReset+0x36>

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	00030d40 	.word	0x00030d40

080054b8 <__errno>:
 80054b8:	4b01      	ldr	r3, [pc, #4]	; (80054c0 <__errno+0x8>)
 80054ba:	6818      	ldr	r0, [r3, #0]
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	2000000c 	.word	0x2000000c

080054c4 <__libc_init_array>:
 80054c4:	b570      	push	{r4, r5, r6, lr}
 80054c6:	4e0d      	ldr	r6, [pc, #52]	; (80054fc <__libc_init_array+0x38>)
 80054c8:	4c0d      	ldr	r4, [pc, #52]	; (8005500 <__libc_init_array+0x3c>)
 80054ca:	1ba4      	subs	r4, r4, r6
 80054cc:	10a4      	asrs	r4, r4, #2
 80054ce:	2500      	movs	r5, #0
 80054d0:	42a5      	cmp	r5, r4
 80054d2:	d109      	bne.n	80054e8 <__libc_init_array+0x24>
 80054d4:	4e0b      	ldr	r6, [pc, #44]	; (8005504 <__libc_init_array+0x40>)
 80054d6:	4c0c      	ldr	r4, [pc, #48]	; (8005508 <__libc_init_array+0x44>)
 80054d8:	f000 fc26 	bl	8005d28 <_init>
 80054dc:	1ba4      	subs	r4, r4, r6
 80054de:	10a4      	asrs	r4, r4, #2
 80054e0:	2500      	movs	r5, #0
 80054e2:	42a5      	cmp	r5, r4
 80054e4:	d105      	bne.n	80054f2 <__libc_init_array+0x2e>
 80054e6:	bd70      	pop	{r4, r5, r6, pc}
 80054e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054ec:	4798      	blx	r3
 80054ee:	3501      	adds	r5, #1
 80054f0:	e7ee      	b.n	80054d0 <__libc_init_array+0xc>
 80054f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054f6:	4798      	blx	r3
 80054f8:	3501      	adds	r5, #1
 80054fa:	e7f2      	b.n	80054e2 <__libc_init_array+0x1e>
 80054fc:	08005dac 	.word	0x08005dac
 8005500:	08005dac 	.word	0x08005dac
 8005504:	08005dac 	.word	0x08005dac
 8005508:	08005db0 	.word	0x08005db0

0800550c <memset>:
 800550c:	4402      	add	r2, r0
 800550e:	4603      	mov	r3, r0
 8005510:	4293      	cmp	r3, r2
 8005512:	d100      	bne.n	8005516 <memset+0xa>
 8005514:	4770      	bx	lr
 8005516:	f803 1b01 	strb.w	r1, [r3], #1
 800551a:	e7f9      	b.n	8005510 <memset+0x4>

0800551c <siprintf>:
 800551c:	b40e      	push	{r1, r2, r3}
 800551e:	b500      	push	{lr}
 8005520:	b09c      	sub	sp, #112	; 0x70
 8005522:	ab1d      	add	r3, sp, #116	; 0x74
 8005524:	9002      	str	r0, [sp, #8]
 8005526:	9006      	str	r0, [sp, #24]
 8005528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800552c:	4809      	ldr	r0, [pc, #36]	; (8005554 <siprintf+0x38>)
 800552e:	9107      	str	r1, [sp, #28]
 8005530:	9104      	str	r1, [sp, #16]
 8005532:	4909      	ldr	r1, [pc, #36]	; (8005558 <siprintf+0x3c>)
 8005534:	f853 2b04 	ldr.w	r2, [r3], #4
 8005538:	9105      	str	r1, [sp, #20]
 800553a:	6800      	ldr	r0, [r0, #0]
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	a902      	add	r1, sp, #8
 8005540:	f000 f866 	bl	8005610 <_svfiprintf_r>
 8005544:	9b02      	ldr	r3, [sp, #8]
 8005546:	2200      	movs	r2, #0
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	b01c      	add	sp, #112	; 0x70
 800554c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005550:	b003      	add	sp, #12
 8005552:	4770      	bx	lr
 8005554:	2000000c 	.word	0x2000000c
 8005558:	ffff0208 	.word	0xffff0208

0800555c <__ssputs_r>:
 800555c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005560:	688e      	ldr	r6, [r1, #8]
 8005562:	429e      	cmp	r6, r3
 8005564:	4682      	mov	sl, r0
 8005566:	460c      	mov	r4, r1
 8005568:	4690      	mov	r8, r2
 800556a:	4699      	mov	r9, r3
 800556c:	d837      	bhi.n	80055de <__ssputs_r+0x82>
 800556e:	898a      	ldrh	r2, [r1, #12]
 8005570:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005574:	d031      	beq.n	80055da <__ssputs_r+0x7e>
 8005576:	6825      	ldr	r5, [r4, #0]
 8005578:	6909      	ldr	r1, [r1, #16]
 800557a:	1a6f      	subs	r7, r5, r1
 800557c:	6965      	ldr	r5, [r4, #20]
 800557e:	2302      	movs	r3, #2
 8005580:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005584:	fb95 f5f3 	sdiv	r5, r5, r3
 8005588:	f109 0301 	add.w	r3, r9, #1
 800558c:	443b      	add	r3, r7
 800558e:	429d      	cmp	r5, r3
 8005590:	bf38      	it	cc
 8005592:	461d      	movcc	r5, r3
 8005594:	0553      	lsls	r3, r2, #21
 8005596:	d530      	bpl.n	80055fa <__ssputs_r+0x9e>
 8005598:	4629      	mov	r1, r5
 800559a:	f000 fb2b 	bl	8005bf4 <_malloc_r>
 800559e:	4606      	mov	r6, r0
 80055a0:	b950      	cbnz	r0, 80055b8 <__ssputs_r+0x5c>
 80055a2:	230c      	movs	r3, #12
 80055a4:	f8ca 3000 	str.w	r3, [sl]
 80055a8:	89a3      	ldrh	r3, [r4, #12]
 80055aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ae:	81a3      	strh	r3, [r4, #12]
 80055b0:	f04f 30ff 	mov.w	r0, #4294967295
 80055b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b8:	463a      	mov	r2, r7
 80055ba:	6921      	ldr	r1, [r4, #16]
 80055bc:	f000 faa8 	bl	8005b10 <memcpy>
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ca:	81a3      	strh	r3, [r4, #12]
 80055cc:	6126      	str	r6, [r4, #16]
 80055ce:	6165      	str	r5, [r4, #20]
 80055d0:	443e      	add	r6, r7
 80055d2:	1bed      	subs	r5, r5, r7
 80055d4:	6026      	str	r6, [r4, #0]
 80055d6:	60a5      	str	r5, [r4, #8]
 80055d8:	464e      	mov	r6, r9
 80055da:	454e      	cmp	r6, r9
 80055dc:	d900      	bls.n	80055e0 <__ssputs_r+0x84>
 80055de:	464e      	mov	r6, r9
 80055e0:	4632      	mov	r2, r6
 80055e2:	4641      	mov	r1, r8
 80055e4:	6820      	ldr	r0, [r4, #0]
 80055e6:	f000 fa9e 	bl	8005b26 <memmove>
 80055ea:	68a3      	ldr	r3, [r4, #8]
 80055ec:	1b9b      	subs	r3, r3, r6
 80055ee:	60a3      	str	r3, [r4, #8]
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	441e      	add	r6, r3
 80055f4:	6026      	str	r6, [r4, #0]
 80055f6:	2000      	movs	r0, #0
 80055f8:	e7dc      	b.n	80055b4 <__ssputs_r+0x58>
 80055fa:	462a      	mov	r2, r5
 80055fc:	f000 fb54 	bl	8005ca8 <_realloc_r>
 8005600:	4606      	mov	r6, r0
 8005602:	2800      	cmp	r0, #0
 8005604:	d1e2      	bne.n	80055cc <__ssputs_r+0x70>
 8005606:	6921      	ldr	r1, [r4, #16]
 8005608:	4650      	mov	r0, sl
 800560a:	f000 faa5 	bl	8005b58 <_free_r>
 800560e:	e7c8      	b.n	80055a2 <__ssputs_r+0x46>

08005610 <_svfiprintf_r>:
 8005610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005614:	461d      	mov	r5, r3
 8005616:	898b      	ldrh	r3, [r1, #12]
 8005618:	061f      	lsls	r7, r3, #24
 800561a:	b09d      	sub	sp, #116	; 0x74
 800561c:	4680      	mov	r8, r0
 800561e:	460c      	mov	r4, r1
 8005620:	4616      	mov	r6, r2
 8005622:	d50f      	bpl.n	8005644 <_svfiprintf_r+0x34>
 8005624:	690b      	ldr	r3, [r1, #16]
 8005626:	b96b      	cbnz	r3, 8005644 <_svfiprintf_r+0x34>
 8005628:	2140      	movs	r1, #64	; 0x40
 800562a:	f000 fae3 	bl	8005bf4 <_malloc_r>
 800562e:	6020      	str	r0, [r4, #0]
 8005630:	6120      	str	r0, [r4, #16]
 8005632:	b928      	cbnz	r0, 8005640 <_svfiprintf_r+0x30>
 8005634:	230c      	movs	r3, #12
 8005636:	f8c8 3000 	str.w	r3, [r8]
 800563a:	f04f 30ff 	mov.w	r0, #4294967295
 800563e:	e0c8      	b.n	80057d2 <_svfiprintf_r+0x1c2>
 8005640:	2340      	movs	r3, #64	; 0x40
 8005642:	6163      	str	r3, [r4, #20]
 8005644:	2300      	movs	r3, #0
 8005646:	9309      	str	r3, [sp, #36]	; 0x24
 8005648:	2320      	movs	r3, #32
 800564a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800564e:	2330      	movs	r3, #48	; 0x30
 8005650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005654:	9503      	str	r5, [sp, #12]
 8005656:	f04f 0b01 	mov.w	fp, #1
 800565a:	4637      	mov	r7, r6
 800565c:	463d      	mov	r5, r7
 800565e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005662:	b10b      	cbz	r3, 8005668 <_svfiprintf_r+0x58>
 8005664:	2b25      	cmp	r3, #37	; 0x25
 8005666:	d13e      	bne.n	80056e6 <_svfiprintf_r+0xd6>
 8005668:	ebb7 0a06 	subs.w	sl, r7, r6
 800566c:	d00b      	beq.n	8005686 <_svfiprintf_r+0x76>
 800566e:	4653      	mov	r3, sl
 8005670:	4632      	mov	r2, r6
 8005672:	4621      	mov	r1, r4
 8005674:	4640      	mov	r0, r8
 8005676:	f7ff ff71 	bl	800555c <__ssputs_r>
 800567a:	3001      	adds	r0, #1
 800567c:	f000 80a4 	beq.w	80057c8 <_svfiprintf_r+0x1b8>
 8005680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005682:	4453      	add	r3, sl
 8005684:	9309      	str	r3, [sp, #36]	; 0x24
 8005686:	783b      	ldrb	r3, [r7, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 809d 	beq.w	80057c8 <_svfiprintf_r+0x1b8>
 800568e:	2300      	movs	r3, #0
 8005690:	f04f 32ff 	mov.w	r2, #4294967295
 8005694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005698:	9304      	str	r3, [sp, #16]
 800569a:	9307      	str	r3, [sp, #28]
 800569c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056a0:	931a      	str	r3, [sp, #104]	; 0x68
 80056a2:	462f      	mov	r7, r5
 80056a4:	2205      	movs	r2, #5
 80056a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80056aa:	4850      	ldr	r0, [pc, #320]	; (80057ec <_svfiprintf_r+0x1dc>)
 80056ac:	f7fa fdb0 	bl	8000210 <memchr>
 80056b0:	9b04      	ldr	r3, [sp, #16]
 80056b2:	b9d0      	cbnz	r0, 80056ea <_svfiprintf_r+0xda>
 80056b4:	06d9      	lsls	r1, r3, #27
 80056b6:	bf44      	itt	mi
 80056b8:	2220      	movmi	r2, #32
 80056ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056be:	071a      	lsls	r2, r3, #28
 80056c0:	bf44      	itt	mi
 80056c2:	222b      	movmi	r2, #43	; 0x2b
 80056c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056c8:	782a      	ldrb	r2, [r5, #0]
 80056ca:	2a2a      	cmp	r2, #42	; 0x2a
 80056cc:	d015      	beq.n	80056fa <_svfiprintf_r+0xea>
 80056ce:	9a07      	ldr	r2, [sp, #28]
 80056d0:	462f      	mov	r7, r5
 80056d2:	2000      	movs	r0, #0
 80056d4:	250a      	movs	r5, #10
 80056d6:	4639      	mov	r1, r7
 80056d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056dc:	3b30      	subs	r3, #48	; 0x30
 80056de:	2b09      	cmp	r3, #9
 80056e0:	d94d      	bls.n	800577e <_svfiprintf_r+0x16e>
 80056e2:	b1b8      	cbz	r0, 8005714 <_svfiprintf_r+0x104>
 80056e4:	e00f      	b.n	8005706 <_svfiprintf_r+0xf6>
 80056e6:	462f      	mov	r7, r5
 80056e8:	e7b8      	b.n	800565c <_svfiprintf_r+0x4c>
 80056ea:	4a40      	ldr	r2, [pc, #256]	; (80057ec <_svfiprintf_r+0x1dc>)
 80056ec:	1a80      	subs	r0, r0, r2
 80056ee:	fa0b f000 	lsl.w	r0, fp, r0
 80056f2:	4318      	orrs	r0, r3
 80056f4:	9004      	str	r0, [sp, #16]
 80056f6:	463d      	mov	r5, r7
 80056f8:	e7d3      	b.n	80056a2 <_svfiprintf_r+0x92>
 80056fa:	9a03      	ldr	r2, [sp, #12]
 80056fc:	1d11      	adds	r1, r2, #4
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	9103      	str	r1, [sp, #12]
 8005702:	2a00      	cmp	r2, #0
 8005704:	db01      	blt.n	800570a <_svfiprintf_r+0xfa>
 8005706:	9207      	str	r2, [sp, #28]
 8005708:	e004      	b.n	8005714 <_svfiprintf_r+0x104>
 800570a:	4252      	negs	r2, r2
 800570c:	f043 0302 	orr.w	r3, r3, #2
 8005710:	9207      	str	r2, [sp, #28]
 8005712:	9304      	str	r3, [sp, #16]
 8005714:	783b      	ldrb	r3, [r7, #0]
 8005716:	2b2e      	cmp	r3, #46	; 0x2e
 8005718:	d10c      	bne.n	8005734 <_svfiprintf_r+0x124>
 800571a:	787b      	ldrb	r3, [r7, #1]
 800571c:	2b2a      	cmp	r3, #42	; 0x2a
 800571e:	d133      	bne.n	8005788 <_svfiprintf_r+0x178>
 8005720:	9b03      	ldr	r3, [sp, #12]
 8005722:	1d1a      	adds	r2, r3, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	9203      	str	r2, [sp, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	bfb8      	it	lt
 800572c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005730:	3702      	adds	r7, #2
 8005732:	9305      	str	r3, [sp, #20]
 8005734:	4d2e      	ldr	r5, [pc, #184]	; (80057f0 <_svfiprintf_r+0x1e0>)
 8005736:	7839      	ldrb	r1, [r7, #0]
 8005738:	2203      	movs	r2, #3
 800573a:	4628      	mov	r0, r5
 800573c:	f7fa fd68 	bl	8000210 <memchr>
 8005740:	b138      	cbz	r0, 8005752 <_svfiprintf_r+0x142>
 8005742:	2340      	movs	r3, #64	; 0x40
 8005744:	1b40      	subs	r0, r0, r5
 8005746:	fa03 f000 	lsl.w	r0, r3, r0
 800574a:	9b04      	ldr	r3, [sp, #16]
 800574c:	4303      	orrs	r3, r0
 800574e:	3701      	adds	r7, #1
 8005750:	9304      	str	r3, [sp, #16]
 8005752:	7839      	ldrb	r1, [r7, #0]
 8005754:	4827      	ldr	r0, [pc, #156]	; (80057f4 <_svfiprintf_r+0x1e4>)
 8005756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800575a:	2206      	movs	r2, #6
 800575c:	1c7e      	adds	r6, r7, #1
 800575e:	f7fa fd57 	bl	8000210 <memchr>
 8005762:	2800      	cmp	r0, #0
 8005764:	d038      	beq.n	80057d8 <_svfiprintf_r+0x1c8>
 8005766:	4b24      	ldr	r3, [pc, #144]	; (80057f8 <_svfiprintf_r+0x1e8>)
 8005768:	bb13      	cbnz	r3, 80057b0 <_svfiprintf_r+0x1a0>
 800576a:	9b03      	ldr	r3, [sp, #12]
 800576c:	3307      	adds	r3, #7
 800576e:	f023 0307 	bic.w	r3, r3, #7
 8005772:	3308      	adds	r3, #8
 8005774:	9303      	str	r3, [sp, #12]
 8005776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005778:	444b      	add	r3, r9
 800577a:	9309      	str	r3, [sp, #36]	; 0x24
 800577c:	e76d      	b.n	800565a <_svfiprintf_r+0x4a>
 800577e:	fb05 3202 	mla	r2, r5, r2, r3
 8005782:	2001      	movs	r0, #1
 8005784:	460f      	mov	r7, r1
 8005786:	e7a6      	b.n	80056d6 <_svfiprintf_r+0xc6>
 8005788:	2300      	movs	r3, #0
 800578a:	3701      	adds	r7, #1
 800578c:	9305      	str	r3, [sp, #20]
 800578e:	4619      	mov	r1, r3
 8005790:	250a      	movs	r5, #10
 8005792:	4638      	mov	r0, r7
 8005794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005798:	3a30      	subs	r2, #48	; 0x30
 800579a:	2a09      	cmp	r2, #9
 800579c:	d903      	bls.n	80057a6 <_svfiprintf_r+0x196>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0c8      	beq.n	8005734 <_svfiprintf_r+0x124>
 80057a2:	9105      	str	r1, [sp, #20]
 80057a4:	e7c6      	b.n	8005734 <_svfiprintf_r+0x124>
 80057a6:	fb05 2101 	mla	r1, r5, r1, r2
 80057aa:	2301      	movs	r3, #1
 80057ac:	4607      	mov	r7, r0
 80057ae:	e7f0      	b.n	8005792 <_svfiprintf_r+0x182>
 80057b0:	ab03      	add	r3, sp, #12
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	4622      	mov	r2, r4
 80057b6:	4b11      	ldr	r3, [pc, #68]	; (80057fc <_svfiprintf_r+0x1ec>)
 80057b8:	a904      	add	r1, sp, #16
 80057ba:	4640      	mov	r0, r8
 80057bc:	f3af 8000 	nop.w
 80057c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80057c4:	4681      	mov	r9, r0
 80057c6:	d1d6      	bne.n	8005776 <_svfiprintf_r+0x166>
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	065b      	lsls	r3, r3, #25
 80057cc:	f53f af35 	bmi.w	800563a <_svfiprintf_r+0x2a>
 80057d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057d2:	b01d      	add	sp, #116	; 0x74
 80057d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d8:	ab03      	add	r3, sp, #12
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	4622      	mov	r2, r4
 80057de:	4b07      	ldr	r3, [pc, #28]	; (80057fc <_svfiprintf_r+0x1ec>)
 80057e0:	a904      	add	r1, sp, #16
 80057e2:	4640      	mov	r0, r8
 80057e4:	f000 f882 	bl	80058ec <_printf_i>
 80057e8:	e7ea      	b.n	80057c0 <_svfiprintf_r+0x1b0>
 80057ea:	bf00      	nop
 80057ec:	08005d70 	.word	0x08005d70
 80057f0:	08005d76 	.word	0x08005d76
 80057f4:	08005d7a 	.word	0x08005d7a
 80057f8:	00000000 	.word	0x00000000
 80057fc:	0800555d 	.word	0x0800555d

08005800 <_printf_common>:
 8005800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005804:	4691      	mov	r9, r2
 8005806:	461f      	mov	r7, r3
 8005808:	688a      	ldr	r2, [r1, #8]
 800580a:	690b      	ldr	r3, [r1, #16]
 800580c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005810:	4293      	cmp	r3, r2
 8005812:	bfb8      	it	lt
 8005814:	4613      	movlt	r3, r2
 8005816:	f8c9 3000 	str.w	r3, [r9]
 800581a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800581e:	4606      	mov	r6, r0
 8005820:	460c      	mov	r4, r1
 8005822:	b112      	cbz	r2, 800582a <_printf_common+0x2a>
 8005824:	3301      	adds	r3, #1
 8005826:	f8c9 3000 	str.w	r3, [r9]
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	0699      	lsls	r1, r3, #26
 800582e:	bf42      	ittt	mi
 8005830:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005834:	3302      	addmi	r3, #2
 8005836:	f8c9 3000 	strmi.w	r3, [r9]
 800583a:	6825      	ldr	r5, [r4, #0]
 800583c:	f015 0506 	ands.w	r5, r5, #6
 8005840:	d107      	bne.n	8005852 <_printf_common+0x52>
 8005842:	f104 0a19 	add.w	sl, r4, #25
 8005846:	68e3      	ldr	r3, [r4, #12]
 8005848:	f8d9 2000 	ldr.w	r2, [r9]
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	42ab      	cmp	r3, r5
 8005850:	dc28      	bgt.n	80058a4 <_printf_common+0xa4>
 8005852:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	3300      	adds	r3, #0
 800585a:	bf18      	it	ne
 800585c:	2301      	movne	r3, #1
 800585e:	0692      	lsls	r2, r2, #26
 8005860:	d42d      	bmi.n	80058be <_printf_common+0xbe>
 8005862:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005866:	4639      	mov	r1, r7
 8005868:	4630      	mov	r0, r6
 800586a:	47c0      	blx	r8
 800586c:	3001      	adds	r0, #1
 800586e:	d020      	beq.n	80058b2 <_printf_common+0xb2>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	68e5      	ldr	r5, [r4, #12]
 8005874:	f8d9 2000 	ldr.w	r2, [r9]
 8005878:	f003 0306 	and.w	r3, r3, #6
 800587c:	2b04      	cmp	r3, #4
 800587e:	bf08      	it	eq
 8005880:	1aad      	subeq	r5, r5, r2
 8005882:	68a3      	ldr	r3, [r4, #8]
 8005884:	6922      	ldr	r2, [r4, #16]
 8005886:	bf0c      	ite	eq
 8005888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800588c:	2500      	movne	r5, #0
 800588e:	4293      	cmp	r3, r2
 8005890:	bfc4      	itt	gt
 8005892:	1a9b      	subgt	r3, r3, r2
 8005894:	18ed      	addgt	r5, r5, r3
 8005896:	f04f 0900 	mov.w	r9, #0
 800589a:	341a      	adds	r4, #26
 800589c:	454d      	cmp	r5, r9
 800589e:	d11a      	bne.n	80058d6 <_printf_common+0xd6>
 80058a0:	2000      	movs	r0, #0
 80058a2:	e008      	b.n	80058b6 <_printf_common+0xb6>
 80058a4:	2301      	movs	r3, #1
 80058a6:	4652      	mov	r2, sl
 80058a8:	4639      	mov	r1, r7
 80058aa:	4630      	mov	r0, r6
 80058ac:	47c0      	blx	r8
 80058ae:	3001      	adds	r0, #1
 80058b0:	d103      	bne.n	80058ba <_printf_common+0xba>
 80058b2:	f04f 30ff 	mov.w	r0, #4294967295
 80058b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ba:	3501      	adds	r5, #1
 80058bc:	e7c3      	b.n	8005846 <_printf_common+0x46>
 80058be:	18e1      	adds	r1, r4, r3
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	2030      	movs	r0, #48	; 0x30
 80058c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058c8:	4422      	add	r2, r4
 80058ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058d2:	3302      	adds	r3, #2
 80058d4:	e7c5      	b.n	8005862 <_printf_common+0x62>
 80058d6:	2301      	movs	r3, #1
 80058d8:	4622      	mov	r2, r4
 80058da:	4639      	mov	r1, r7
 80058dc:	4630      	mov	r0, r6
 80058de:	47c0      	blx	r8
 80058e0:	3001      	adds	r0, #1
 80058e2:	d0e6      	beq.n	80058b2 <_printf_common+0xb2>
 80058e4:	f109 0901 	add.w	r9, r9, #1
 80058e8:	e7d8      	b.n	800589c <_printf_common+0x9c>
	...

080058ec <_printf_i>:
 80058ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80058f4:	460c      	mov	r4, r1
 80058f6:	7e09      	ldrb	r1, [r1, #24]
 80058f8:	b085      	sub	sp, #20
 80058fa:	296e      	cmp	r1, #110	; 0x6e
 80058fc:	4617      	mov	r7, r2
 80058fe:	4606      	mov	r6, r0
 8005900:	4698      	mov	r8, r3
 8005902:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005904:	f000 80b3 	beq.w	8005a6e <_printf_i+0x182>
 8005908:	d822      	bhi.n	8005950 <_printf_i+0x64>
 800590a:	2963      	cmp	r1, #99	; 0x63
 800590c:	d036      	beq.n	800597c <_printf_i+0x90>
 800590e:	d80a      	bhi.n	8005926 <_printf_i+0x3a>
 8005910:	2900      	cmp	r1, #0
 8005912:	f000 80b9 	beq.w	8005a88 <_printf_i+0x19c>
 8005916:	2958      	cmp	r1, #88	; 0x58
 8005918:	f000 8083 	beq.w	8005a22 <_printf_i+0x136>
 800591c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005920:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005924:	e032      	b.n	800598c <_printf_i+0xa0>
 8005926:	2964      	cmp	r1, #100	; 0x64
 8005928:	d001      	beq.n	800592e <_printf_i+0x42>
 800592a:	2969      	cmp	r1, #105	; 0x69
 800592c:	d1f6      	bne.n	800591c <_printf_i+0x30>
 800592e:	6820      	ldr	r0, [r4, #0]
 8005930:	6813      	ldr	r3, [r2, #0]
 8005932:	0605      	lsls	r5, r0, #24
 8005934:	f103 0104 	add.w	r1, r3, #4
 8005938:	d52a      	bpl.n	8005990 <_printf_i+0xa4>
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6011      	str	r1, [r2, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	da03      	bge.n	800594a <_printf_i+0x5e>
 8005942:	222d      	movs	r2, #45	; 0x2d
 8005944:	425b      	negs	r3, r3
 8005946:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800594a:	486f      	ldr	r0, [pc, #444]	; (8005b08 <_printf_i+0x21c>)
 800594c:	220a      	movs	r2, #10
 800594e:	e039      	b.n	80059c4 <_printf_i+0xd8>
 8005950:	2973      	cmp	r1, #115	; 0x73
 8005952:	f000 809d 	beq.w	8005a90 <_printf_i+0x1a4>
 8005956:	d808      	bhi.n	800596a <_printf_i+0x7e>
 8005958:	296f      	cmp	r1, #111	; 0x6f
 800595a:	d020      	beq.n	800599e <_printf_i+0xb2>
 800595c:	2970      	cmp	r1, #112	; 0x70
 800595e:	d1dd      	bne.n	800591c <_printf_i+0x30>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	f043 0320 	orr.w	r3, r3, #32
 8005966:	6023      	str	r3, [r4, #0]
 8005968:	e003      	b.n	8005972 <_printf_i+0x86>
 800596a:	2975      	cmp	r1, #117	; 0x75
 800596c:	d017      	beq.n	800599e <_printf_i+0xb2>
 800596e:	2978      	cmp	r1, #120	; 0x78
 8005970:	d1d4      	bne.n	800591c <_printf_i+0x30>
 8005972:	2378      	movs	r3, #120	; 0x78
 8005974:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005978:	4864      	ldr	r0, [pc, #400]	; (8005b0c <_printf_i+0x220>)
 800597a:	e055      	b.n	8005a28 <_printf_i+0x13c>
 800597c:	6813      	ldr	r3, [r2, #0]
 800597e:	1d19      	adds	r1, r3, #4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6011      	str	r1, [r2, #0]
 8005984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800598c:	2301      	movs	r3, #1
 800598e:	e08c      	b.n	8005aaa <_printf_i+0x1be>
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6011      	str	r1, [r2, #0]
 8005994:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005998:	bf18      	it	ne
 800599a:	b21b      	sxthne	r3, r3
 800599c:	e7cf      	b.n	800593e <_printf_i+0x52>
 800599e:	6813      	ldr	r3, [r2, #0]
 80059a0:	6825      	ldr	r5, [r4, #0]
 80059a2:	1d18      	adds	r0, r3, #4
 80059a4:	6010      	str	r0, [r2, #0]
 80059a6:	0628      	lsls	r0, r5, #24
 80059a8:	d501      	bpl.n	80059ae <_printf_i+0xc2>
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	e002      	b.n	80059b4 <_printf_i+0xc8>
 80059ae:	0668      	lsls	r0, r5, #25
 80059b0:	d5fb      	bpl.n	80059aa <_printf_i+0xbe>
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	4854      	ldr	r0, [pc, #336]	; (8005b08 <_printf_i+0x21c>)
 80059b6:	296f      	cmp	r1, #111	; 0x6f
 80059b8:	bf14      	ite	ne
 80059ba:	220a      	movne	r2, #10
 80059bc:	2208      	moveq	r2, #8
 80059be:	2100      	movs	r1, #0
 80059c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059c4:	6865      	ldr	r5, [r4, #4]
 80059c6:	60a5      	str	r5, [r4, #8]
 80059c8:	2d00      	cmp	r5, #0
 80059ca:	f2c0 8095 	blt.w	8005af8 <_printf_i+0x20c>
 80059ce:	6821      	ldr	r1, [r4, #0]
 80059d0:	f021 0104 	bic.w	r1, r1, #4
 80059d4:	6021      	str	r1, [r4, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d13d      	bne.n	8005a56 <_printf_i+0x16a>
 80059da:	2d00      	cmp	r5, #0
 80059dc:	f040 808e 	bne.w	8005afc <_printf_i+0x210>
 80059e0:	4665      	mov	r5, ip
 80059e2:	2a08      	cmp	r2, #8
 80059e4:	d10b      	bne.n	80059fe <_printf_i+0x112>
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	07db      	lsls	r3, r3, #31
 80059ea:	d508      	bpl.n	80059fe <_printf_i+0x112>
 80059ec:	6923      	ldr	r3, [r4, #16]
 80059ee:	6862      	ldr	r2, [r4, #4]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	bfde      	ittt	le
 80059f4:	2330      	movle	r3, #48	; 0x30
 80059f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059fe:	ebac 0305 	sub.w	r3, ip, r5
 8005a02:	6123      	str	r3, [r4, #16]
 8005a04:	f8cd 8000 	str.w	r8, [sp]
 8005a08:	463b      	mov	r3, r7
 8005a0a:	aa03      	add	r2, sp, #12
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f7ff fef6 	bl	8005800 <_printf_common>
 8005a14:	3001      	adds	r0, #1
 8005a16:	d14d      	bne.n	8005ab4 <_printf_i+0x1c8>
 8005a18:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1c:	b005      	add	sp, #20
 8005a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a22:	4839      	ldr	r0, [pc, #228]	; (8005b08 <_printf_i+0x21c>)
 8005a24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a28:	6813      	ldr	r3, [r2, #0]
 8005a2a:	6821      	ldr	r1, [r4, #0]
 8005a2c:	1d1d      	adds	r5, r3, #4
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6015      	str	r5, [r2, #0]
 8005a32:	060a      	lsls	r2, r1, #24
 8005a34:	d50b      	bpl.n	8005a4e <_printf_i+0x162>
 8005a36:	07ca      	lsls	r2, r1, #31
 8005a38:	bf44      	itt	mi
 8005a3a:	f041 0120 	orrmi.w	r1, r1, #32
 8005a3e:	6021      	strmi	r1, [r4, #0]
 8005a40:	b91b      	cbnz	r3, 8005a4a <_printf_i+0x15e>
 8005a42:	6822      	ldr	r2, [r4, #0]
 8005a44:	f022 0220 	bic.w	r2, r2, #32
 8005a48:	6022      	str	r2, [r4, #0]
 8005a4a:	2210      	movs	r2, #16
 8005a4c:	e7b7      	b.n	80059be <_printf_i+0xd2>
 8005a4e:	064d      	lsls	r5, r1, #25
 8005a50:	bf48      	it	mi
 8005a52:	b29b      	uxthmi	r3, r3
 8005a54:	e7ef      	b.n	8005a36 <_printf_i+0x14a>
 8005a56:	4665      	mov	r5, ip
 8005a58:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a5c:	fb02 3311 	mls	r3, r2, r1, r3
 8005a60:	5cc3      	ldrb	r3, [r0, r3]
 8005a62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a66:	460b      	mov	r3, r1
 8005a68:	2900      	cmp	r1, #0
 8005a6a:	d1f5      	bne.n	8005a58 <_printf_i+0x16c>
 8005a6c:	e7b9      	b.n	80059e2 <_printf_i+0xf6>
 8005a6e:	6813      	ldr	r3, [r2, #0]
 8005a70:	6825      	ldr	r5, [r4, #0]
 8005a72:	6961      	ldr	r1, [r4, #20]
 8005a74:	1d18      	adds	r0, r3, #4
 8005a76:	6010      	str	r0, [r2, #0]
 8005a78:	0628      	lsls	r0, r5, #24
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	d501      	bpl.n	8005a82 <_printf_i+0x196>
 8005a7e:	6019      	str	r1, [r3, #0]
 8005a80:	e002      	b.n	8005a88 <_printf_i+0x19c>
 8005a82:	066a      	lsls	r2, r5, #25
 8005a84:	d5fb      	bpl.n	8005a7e <_printf_i+0x192>
 8005a86:	8019      	strh	r1, [r3, #0]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	6123      	str	r3, [r4, #16]
 8005a8c:	4665      	mov	r5, ip
 8005a8e:	e7b9      	b.n	8005a04 <_printf_i+0x118>
 8005a90:	6813      	ldr	r3, [r2, #0]
 8005a92:	1d19      	adds	r1, r3, #4
 8005a94:	6011      	str	r1, [r2, #0]
 8005a96:	681d      	ldr	r5, [r3, #0]
 8005a98:	6862      	ldr	r2, [r4, #4]
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	f7fa fbb7 	bl	8000210 <memchr>
 8005aa2:	b108      	cbz	r0, 8005aa8 <_printf_i+0x1bc>
 8005aa4:	1b40      	subs	r0, r0, r5
 8005aa6:	6060      	str	r0, [r4, #4]
 8005aa8:	6863      	ldr	r3, [r4, #4]
 8005aaa:	6123      	str	r3, [r4, #16]
 8005aac:	2300      	movs	r3, #0
 8005aae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab2:	e7a7      	b.n	8005a04 <_printf_i+0x118>
 8005ab4:	6923      	ldr	r3, [r4, #16]
 8005ab6:	462a      	mov	r2, r5
 8005ab8:	4639      	mov	r1, r7
 8005aba:	4630      	mov	r0, r6
 8005abc:	47c0      	blx	r8
 8005abe:	3001      	adds	r0, #1
 8005ac0:	d0aa      	beq.n	8005a18 <_printf_i+0x12c>
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	079b      	lsls	r3, r3, #30
 8005ac6:	d413      	bmi.n	8005af0 <_printf_i+0x204>
 8005ac8:	68e0      	ldr	r0, [r4, #12]
 8005aca:	9b03      	ldr	r3, [sp, #12]
 8005acc:	4298      	cmp	r0, r3
 8005ace:	bfb8      	it	lt
 8005ad0:	4618      	movlt	r0, r3
 8005ad2:	e7a3      	b.n	8005a1c <_printf_i+0x130>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	464a      	mov	r2, r9
 8005ad8:	4639      	mov	r1, r7
 8005ada:	4630      	mov	r0, r6
 8005adc:	47c0      	blx	r8
 8005ade:	3001      	adds	r0, #1
 8005ae0:	d09a      	beq.n	8005a18 <_printf_i+0x12c>
 8005ae2:	3501      	adds	r5, #1
 8005ae4:	68e3      	ldr	r3, [r4, #12]
 8005ae6:	9a03      	ldr	r2, [sp, #12]
 8005ae8:	1a9b      	subs	r3, r3, r2
 8005aea:	42ab      	cmp	r3, r5
 8005aec:	dcf2      	bgt.n	8005ad4 <_printf_i+0x1e8>
 8005aee:	e7eb      	b.n	8005ac8 <_printf_i+0x1dc>
 8005af0:	2500      	movs	r5, #0
 8005af2:	f104 0919 	add.w	r9, r4, #25
 8005af6:	e7f5      	b.n	8005ae4 <_printf_i+0x1f8>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1ac      	bne.n	8005a56 <_printf_i+0x16a>
 8005afc:	7803      	ldrb	r3, [r0, #0]
 8005afe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b06:	e76c      	b.n	80059e2 <_printf_i+0xf6>
 8005b08:	08005d81 	.word	0x08005d81
 8005b0c:	08005d92 	.word	0x08005d92

08005b10 <memcpy>:
 8005b10:	b510      	push	{r4, lr}
 8005b12:	1e43      	subs	r3, r0, #1
 8005b14:	440a      	add	r2, r1
 8005b16:	4291      	cmp	r1, r2
 8005b18:	d100      	bne.n	8005b1c <memcpy+0xc>
 8005b1a:	bd10      	pop	{r4, pc}
 8005b1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b24:	e7f7      	b.n	8005b16 <memcpy+0x6>

08005b26 <memmove>:
 8005b26:	4288      	cmp	r0, r1
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	eb01 0302 	add.w	r3, r1, r2
 8005b2e:	d807      	bhi.n	8005b40 <memmove+0x1a>
 8005b30:	1e42      	subs	r2, r0, #1
 8005b32:	4299      	cmp	r1, r3
 8005b34:	d00a      	beq.n	8005b4c <memmove+0x26>
 8005b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b3a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b3e:	e7f8      	b.n	8005b32 <memmove+0xc>
 8005b40:	4283      	cmp	r3, r0
 8005b42:	d9f5      	bls.n	8005b30 <memmove+0xa>
 8005b44:	1881      	adds	r1, r0, r2
 8005b46:	1ad2      	subs	r2, r2, r3
 8005b48:	42d3      	cmn	r3, r2
 8005b4a:	d100      	bne.n	8005b4e <memmove+0x28>
 8005b4c:	bd10      	pop	{r4, pc}
 8005b4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b52:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005b56:	e7f7      	b.n	8005b48 <memmove+0x22>

08005b58 <_free_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4605      	mov	r5, r0
 8005b5c:	2900      	cmp	r1, #0
 8005b5e:	d045      	beq.n	8005bec <_free_r+0x94>
 8005b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b64:	1f0c      	subs	r4, r1, #4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bfb8      	it	lt
 8005b6a:	18e4      	addlt	r4, r4, r3
 8005b6c:	f000 f8d2 	bl	8005d14 <__malloc_lock>
 8005b70:	4a1f      	ldr	r2, [pc, #124]	; (8005bf0 <_free_r+0x98>)
 8005b72:	6813      	ldr	r3, [r2, #0]
 8005b74:	4610      	mov	r0, r2
 8005b76:	b933      	cbnz	r3, 8005b86 <_free_r+0x2e>
 8005b78:	6063      	str	r3, [r4, #4]
 8005b7a:	6014      	str	r4, [r2, #0]
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b82:	f000 b8c8 	b.w	8005d16 <__malloc_unlock>
 8005b86:	42a3      	cmp	r3, r4
 8005b88:	d90c      	bls.n	8005ba4 <_free_r+0x4c>
 8005b8a:	6821      	ldr	r1, [r4, #0]
 8005b8c:	1862      	adds	r2, r4, r1
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	bf04      	itt	eq
 8005b92:	681a      	ldreq	r2, [r3, #0]
 8005b94:	685b      	ldreq	r3, [r3, #4]
 8005b96:	6063      	str	r3, [r4, #4]
 8005b98:	bf04      	itt	eq
 8005b9a:	1852      	addeq	r2, r2, r1
 8005b9c:	6022      	streq	r2, [r4, #0]
 8005b9e:	6004      	str	r4, [r0, #0]
 8005ba0:	e7ec      	b.n	8005b7c <_free_r+0x24>
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	b10a      	cbz	r2, 8005bac <_free_r+0x54>
 8005ba8:	42a2      	cmp	r2, r4
 8005baa:	d9fa      	bls.n	8005ba2 <_free_r+0x4a>
 8005bac:	6819      	ldr	r1, [r3, #0]
 8005bae:	1858      	adds	r0, r3, r1
 8005bb0:	42a0      	cmp	r0, r4
 8005bb2:	d10b      	bne.n	8005bcc <_free_r+0x74>
 8005bb4:	6820      	ldr	r0, [r4, #0]
 8005bb6:	4401      	add	r1, r0
 8005bb8:	1858      	adds	r0, r3, r1
 8005bba:	4282      	cmp	r2, r0
 8005bbc:	6019      	str	r1, [r3, #0]
 8005bbe:	d1dd      	bne.n	8005b7c <_free_r+0x24>
 8005bc0:	6810      	ldr	r0, [r2, #0]
 8005bc2:	6852      	ldr	r2, [r2, #4]
 8005bc4:	605a      	str	r2, [r3, #4]
 8005bc6:	4401      	add	r1, r0
 8005bc8:	6019      	str	r1, [r3, #0]
 8005bca:	e7d7      	b.n	8005b7c <_free_r+0x24>
 8005bcc:	d902      	bls.n	8005bd4 <_free_r+0x7c>
 8005bce:	230c      	movs	r3, #12
 8005bd0:	602b      	str	r3, [r5, #0]
 8005bd2:	e7d3      	b.n	8005b7c <_free_r+0x24>
 8005bd4:	6820      	ldr	r0, [r4, #0]
 8005bd6:	1821      	adds	r1, r4, r0
 8005bd8:	428a      	cmp	r2, r1
 8005bda:	bf04      	itt	eq
 8005bdc:	6811      	ldreq	r1, [r2, #0]
 8005bde:	6852      	ldreq	r2, [r2, #4]
 8005be0:	6062      	str	r2, [r4, #4]
 8005be2:	bf04      	itt	eq
 8005be4:	1809      	addeq	r1, r1, r0
 8005be6:	6021      	streq	r1, [r4, #0]
 8005be8:	605c      	str	r4, [r3, #4]
 8005bea:	e7c7      	b.n	8005b7c <_free_r+0x24>
 8005bec:	bd38      	pop	{r3, r4, r5, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000098 	.word	0x20000098

08005bf4 <_malloc_r>:
 8005bf4:	b570      	push	{r4, r5, r6, lr}
 8005bf6:	1ccd      	adds	r5, r1, #3
 8005bf8:	f025 0503 	bic.w	r5, r5, #3
 8005bfc:	3508      	adds	r5, #8
 8005bfe:	2d0c      	cmp	r5, #12
 8005c00:	bf38      	it	cc
 8005c02:	250c      	movcc	r5, #12
 8005c04:	2d00      	cmp	r5, #0
 8005c06:	4606      	mov	r6, r0
 8005c08:	db01      	blt.n	8005c0e <_malloc_r+0x1a>
 8005c0a:	42a9      	cmp	r1, r5
 8005c0c:	d903      	bls.n	8005c16 <_malloc_r+0x22>
 8005c0e:	230c      	movs	r3, #12
 8005c10:	6033      	str	r3, [r6, #0]
 8005c12:	2000      	movs	r0, #0
 8005c14:	bd70      	pop	{r4, r5, r6, pc}
 8005c16:	f000 f87d 	bl	8005d14 <__malloc_lock>
 8005c1a:	4a21      	ldr	r2, [pc, #132]	; (8005ca0 <_malloc_r+0xac>)
 8005c1c:	6814      	ldr	r4, [r2, #0]
 8005c1e:	4621      	mov	r1, r4
 8005c20:	b991      	cbnz	r1, 8005c48 <_malloc_r+0x54>
 8005c22:	4c20      	ldr	r4, [pc, #128]	; (8005ca4 <_malloc_r+0xb0>)
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	b91b      	cbnz	r3, 8005c30 <_malloc_r+0x3c>
 8005c28:	4630      	mov	r0, r6
 8005c2a:	f000 f863 	bl	8005cf4 <_sbrk_r>
 8005c2e:	6020      	str	r0, [r4, #0]
 8005c30:	4629      	mov	r1, r5
 8005c32:	4630      	mov	r0, r6
 8005c34:	f000 f85e 	bl	8005cf4 <_sbrk_r>
 8005c38:	1c43      	adds	r3, r0, #1
 8005c3a:	d124      	bne.n	8005c86 <_malloc_r+0x92>
 8005c3c:	230c      	movs	r3, #12
 8005c3e:	6033      	str	r3, [r6, #0]
 8005c40:	4630      	mov	r0, r6
 8005c42:	f000 f868 	bl	8005d16 <__malloc_unlock>
 8005c46:	e7e4      	b.n	8005c12 <_malloc_r+0x1e>
 8005c48:	680b      	ldr	r3, [r1, #0]
 8005c4a:	1b5b      	subs	r3, r3, r5
 8005c4c:	d418      	bmi.n	8005c80 <_malloc_r+0x8c>
 8005c4e:	2b0b      	cmp	r3, #11
 8005c50:	d90f      	bls.n	8005c72 <_malloc_r+0x7e>
 8005c52:	600b      	str	r3, [r1, #0]
 8005c54:	50cd      	str	r5, [r1, r3]
 8005c56:	18cc      	adds	r4, r1, r3
 8005c58:	4630      	mov	r0, r6
 8005c5a:	f000 f85c 	bl	8005d16 <__malloc_unlock>
 8005c5e:	f104 000b 	add.w	r0, r4, #11
 8005c62:	1d23      	adds	r3, r4, #4
 8005c64:	f020 0007 	bic.w	r0, r0, #7
 8005c68:	1ac3      	subs	r3, r0, r3
 8005c6a:	d0d3      	beq.n	8005c14 <_malloc_r+0x20>
 8005c6c:	425a      	negs	r2, r3
 8005c6e:	50e2      	str	r2, [r4, r3]
 8005c70:	e7d0      	b.n	8005c14 <_malloc_r+0x20>
 8005c72:	428c      	cmp	r4, r1
 8005c74:	684b      	ldr	r3, [r1, #4]
 8005c76:	bf16      	itet	ne
 8005c78:	6063      	strne	r3, [r4, #4]
 8005c7a:	6013      	streq	r3, [r2, #0]
 8005c7c:	460c      	movne	r4, r1
 8005c7e:	e7eb      	b.n	8005c58 <_malloc_r+0x64>
 8005c80:	460c      	mov	r4, r1
 8005c82:	6849      	ldr	r1, [r1, #4]
 8005c84:	e7cc      	b.n	8005c20 <_malloc_r+0x2c>
 8005c86:	1cc4      	adds	r4, r0, #3
 8005c88:	f024 0403 	bic.w	r4, r4, #3
 8005c8c:	42a0      	cmp	r0, r4
 8005c8e:	d005      	beq.n	8005c9c <_malloc_r+0xa8>
 8005c90:	1a21      	subs	r1, r4, r0
 8005c92:	4630      	mov	r0, r6
 8005c94:	f000 f82e 	bl	8005cf4 <_sbrk_r>
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d0cf      	beq.n	8005c3c <_malloc_r+0x48>
 8005c9c:	6025      	str	r5, [r4, #0]
 8005c9e:	e7db      	b.n	8005c58 <_malloc_r+0x64>
 8005ca0:	20000098 	.word	0x20000098
 8005ca4:	2000009c 	.word	0x2000009c

08005ca8 <_realloc_r>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	4607      	mov	r7, r0
 8005cac:	4614      	mov	r4, r2
 8005cae:	460e      	mov	r6, r1
 8005cb0:	b921      	cbnz	r1, 8005cbc <_realloc_r+0x14>
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cb8:	f7ff bf9c 	b.w	8005bf4 <_malloc_r>
 8005cbc:	b922      	cbnz	r2, 8005cc8 <_realloc_r+0x20>
 8005cbe:	f7ff ff4b 	bl	8005b58 <_free_r>
 8005cc2:	4625      	mov	r5, r4
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cc8:	f000 f826 	bl	8005d18 <_malloc_usable_size_r>
 8005ccc:	42a0      	cmp	r0, r4
 8005cce:	d20f      	bcs.n	8005cf0 <_realloc_r+0x48>
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f7ff ff8e 	bl	8005bf4 <_malloc_r>
 8005cd8:	4605      	mov	r5, r0
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	d0f2      	beq.n	8005cc4 <_realloc_r+0x1c>
 8005cde:	4631      	mov	r1, r6
 8005ce0:	4622      	mov	r2, r4
 8005ce2:	f7ff ff15 	bl	8005b10 <memcpy>
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4638      	mov	r0, r7
 8005cea:	f7ff ff35 	bl	8005b58 <_free_r>
 8005cee:	e7e9      	b.n	8005cc4 <_realloc_r+0x1c>
 8005cf0:	4635      	mov	r5, r6
 8005cf2:	e7e7      	b.n	8005cc4 <_realloc_r+0x1c>

08005cf4 <_sbrk_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4c06      	ldr	r4, [pc, #24]	; (8005d10 <_sbrk_r+0x1c>)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	4605      	mov	r5, r0
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	6023      	str	r3, [r4, #0]
 8005d00:	f7fb f91a 	bl	8000f38 <_sbrk>
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	d102      	bne.n	8005d0e <_sbrk_r+0x1a>
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	b103      	cbz	r3, 8005d0e <_sbrk_r+0x1a>
 8005d0c:	602b      	str	r3, [r5, #0]
 8005d0e:	bd38      	pop	{r3, r4, r5, pc}
 8005d10:	20000694 	.word	0x20000694

08005d14 <__malloc_lock>:
 8005d14:	4770      	bx	lr

08005d16 <__malloc_unlock>:
 8005d16:	4770      	bx	lr

08005d18 <_malloc_usable_size_r>:
 8005d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d1c:	1f18      	subs	r0, r3, #4
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bfbc      	itt	lt
 8005d22:	580b      	ldrlt	r3, [r1, r0]
 8005d24:	18c0      	addlt	r0, r0, r3
 8005d26:	4770      	bx	lr

08005d28 <_init>:
 8005d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2a:	bf00      	nop
 8005d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2e:	bc08      	pop	{r3}
 8005d30:	469e      	mov	lr, r3
 8005d32:	4770      	bx	lr

08005d34 <_fini>:
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	bf00      	nop
 8005d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3a:	bc08      	pop	{r3}
 8005d3c:	469e      	mov	lr, r3
 8005d3e:	4770      	bx	lr
